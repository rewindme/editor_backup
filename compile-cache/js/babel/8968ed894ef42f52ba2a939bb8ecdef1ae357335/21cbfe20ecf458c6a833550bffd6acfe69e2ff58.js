var __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
	for (var key in parent) {
		if (__hasProp.call(parent, key)) child[key] = parent[key];
	}function ctor() {
		this.constructor = child;
	}ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    FS = require('fs-plus'),
    Path = require('path'),
    SSH2 = require('ssh2'),
    Connector = require('../connector');

module.exports = (function () {
	__extends(ConnectorSFTP, Connector);

	function ConnectorSFTP() {
		ConnectorSFTP.__super__.constructor.apply(this, arguments);
		this.ssh2 = null;
		this.sftp = null;
		this.status = 'disconnected';
	}

	ConnectorSFTP.prototype.isConnected = function () {
		var self = this;

		return self.status != 'disconnected' && self.sftp;
	};

	ConnectorSFTP.prototype.connect = function (info, completed) {
		var self = this;
		self.info = info;

		var debug = self.info.debug;
		self.info.debug = true;

		self.status = 'connecting';

		self.ssh2 = new SSH2();
		self.ssh2.on('banner', function (msg, lang) {
			self.emit('greeting', msg);
		});
		self.ssh2.on('ready', function () {
			self.ssh2.sftp(function (err, sftp) {
				if (err) {
					self.disconnect();
					return;
				}

				self.status = 'connected';

				self.sftp = sftp;
				self.sftp.on('end', function () {
					self.disconnect();
					self.emit('ended');
				});

				self.emit('connected');

				if (typeof completed === 'function') completed.apply(self, []);
			});
		});
		self.ssh2.on('end', function () {
			self.disconnect();
			self.emit('ended');
		});
		self.ssh2.on('close', function () {
			self.disconnect();
			self.emit('closed');
		});
		self.ssh2.on('error', function (err) {
			self.emit('error', err);
		});
		self.ssh2.on('debug', function (str) {
			if (typeof debug == 'function') debug.apply(null, [str]);
		});
		self.ssh2.on('keyboard-interactive', function (name, instructions, instructionsLang, prompts, finish) {
			finish([self.info.password]);
		});
		self.ssh2.connect(self.info);

		return self;
	};

	ConnectorSFTP.prototype.disconnect = function (completed) {
		var self = this;

		self.status = 'disconnected';

		if (self.sftp) {
			self.sftp.end();
			self.sftp = null;
		}

		if (self.ssh2) {
			self.ssh2.end();
			self.ssh2 = null;
		}

		if (typeof completed === 'function') completed.apply(null, []);

		return self;
	};

	ConnectorSFTP.prototype.abort = function (completed) {

		// TODO find a way to abort current operation

		if (typeof completed === 'function') completed.apply(null, []);

		return this;
	};

	ConnectorSFTP.prototype.list = function (path, recursive, completed) {
		var self = this;

		if (self.isConnected()) {
			if (recursive) {
				var digg = 0,
				    list = [];

				var e = function e() {
					if (typeof completed === 'function') completed.apply(null, [null, list]);
				};
				var l = function l(p) {
					++digg;
					self.sftp.readdir(p, function (err, lis) {
						if (err) return e();

						lis.forEach(function (item) {
							item.filename = Path.join(p, item.filename).replace(/\\/g, '/');
							item.date = new Date();
							item.date.setTime(item.attrs.mtime * 1000);
							list.push({
								name: item.filename,
								type: item.attrs.isFile() ? 'f' : 'd',
								size: item.attrs.size,
								date: item.date
							});
							if (!item.attrs.isFile()) {
								l(item.filename);
							}
						});

						if (--digg == 0) e();
					});
				};
				l(path);
			} else {
				self.sftp.readdir(path, function (err, lis) {
					var list = [];

					if (!err) {
						lis.forEach(function (item) {
							item.filename = Path.join(path, item.filename).replace(/\\/g, '/');
							item.date = new Date();
							item.date.setTime(item.attrs.mtime * 1000);
							list.push({
								name: item.filename,
								type: item.attrs.isFile() ? 'f' : 'd',
								size: item.attrs.size,
								date: item.date
							});
						});
					}

					if (typeof completed === 'function') completed.apply(null, [err, list]);
				});
			}
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return this;
	};

	ConnectorSFTP.prototype.get = function (path, recursive, completed, progress) {
		var self = this,
		    local = self.client.toLocal(path);

		if (self.isConnected()) {
			self.sftp.stat(path, function (err, stats) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
					return;
				}

				if (stats.isFile()) {
					// File
					FS.makeTreeSync(Path.dirname(local));
					self.sftp.fastGet(path, local, {
						step: function step(read, chunk, size) {
							if (typeof progress === 'function') progress.apply(null, [read / size]);
						}
					}, function (err) {
						if (typeof completed === 'function') completed.apply(null, [err]);
						return;
					});
				} else {
					// Directory

					self.list(path, recursive, function (err, list) {
						list.unshift({ name: path, type: 'd' });
						list.forEach(function (item) {
							item.depth = item.name.replace(/^\/+/, '').replace(/\/+$/).split('/').length;
						});
						list.sort(function (a, b) {
							if (a.depth == b.depth) return 0;
							return a.depth > b.depth ? 1 : -1;
						});

						var error = null,
						    total = list.length,
						    i = -1;
						var e = function e() {
							if (typeof completed === 'function') completed.apply(null, [error, list]);
						};
						var n = function n() {
							++i;
							if (typeof progress === 'function') progress.apply(null, [i / total]);

							var item = list.shift();
							if (item == null) return e();
							var local = self.client.toLocal(item.name);
							if (item.type == 'd' || item.type == 'l') {
								//mkdirp(local, function (err) {
								FS.makeTree(local, function (err) {
									if (err) error = err;
									return n();
								});
							} else {
								self.sftp.fastGet(item.name, local, {
									step: function step(read, chunk, size) {
										if (typeof progress === 'function') progress.apply(null, [i / total + read / size / total]);
									}
								}, function (err) {
									if (err) error = err;
									return n();
								});
							}
						};
						n();
					});
				}
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.put = function (path, completed, progress) {
		var self = this,
		    remote = self.client.toRemote(path);

		if (self.isConnected()) {
			// File
			if (FS.isFileSync(path)) {
				var e = function e(err) {
					if (typeof completed === 'function') completed.apply(null, [err ? err : null, [{ name: path, type: 'f' }]]);
				};
				self.sftp.fastPut(path, remote, {
					step: function step(written, chunk, size) {
						if (typeof progress === 'function') progress.apply(null, [written / size]);
					}
				}, function (err) {
					if (err) {
						if (err.type == 'NO_SUCH_FILE') {
							self.mkdir(Path.dirname(remote).replace(/\\/g, '/'), true, function (err) {
								if (err) return e(err);

								self.sftp.fastPut(path, remote, {
									step: function step(written, chunk, size) {
										if (typeof progress === 'function') progress.apply(null, [written / size]);
									}
								}, function (err) {
									return e(err);
								});
							});
							return;
						}
						return e(err);
					}

					return e();
				});
			}

			// Folder
			else {
				self.client._traverseTree(path, function (list) {
					self.mkdir(remote, true, function (err) {
						var error,
						    i = -1,
						    total = list.length;
						var e = function e() {
							if (typeof completed === 'function') completed.apply(null, [error, list]);
						};
						var n = function n() {
							if (++i >= list.length) return e();
							var item = list[i],
							    remote = self.client.toRemote(item.name);
							if (item.type == 'd' || item.type == 'l') {
								self.sftp.mkdir(remote, {}, function (err) {
									if (err) error = err;
									return n();
								});
							} else {
								self.sftp.fastPut(item.name, remote, {
									step: function step(written, chunk, size) {
										if (typeof progress === 'function') progress.apply(null, [i / total + written / size / total]);
									}
								}, function (err) {
									if (err) error = err;
									return n();
								});
							}
						};
						return n();
					});
				});
			}
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.mkdir = function (path, recursive, completed) {
		var self = this,
		    remotes = path.replace(/^\/+/, '').replace(/\/+$/, '').split('/'),
		    dirs = ['/' + remotes.slice(0, remotes.length).join('/')];

		if (self.isConnected()) {
			if (recursive) {
				for (var a = remotes.length - 1; a > 0; --a) dirs.unshift('/' + remotes.slice(0, a).join('/'));
			}

			var n = function n() {
				var dir = dirs.shift(),
				    last = dirs.length == 0;

				self.sftp.mkdir(dir, {}, function (err) {
					if (last) {
						if (typeof completed === 'function') completed.apply(null, [err ? err : null]);
					} else {
						return n();
					}
				});
			};
			n();
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.mkfile = function (path, completed) {
		var self = this,
		    local = self.client.toLocal(path),
		    empty = new Buffer('', 'utf8');

		if (self.isConnected()) {
			self.sftp.open(path, 'w', {}, function (err, handle) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
					return;
				}
				self.sftp.write(handle, empty, 0, 0, 0, function (err) {
					if (err) {
						if (typeof completed === 'function') completed.apply(null, [err]);
						return;
					}
					//mkdirp(Path.dirname(local), function (err1) {
					FS.makeTree(Path.dirname(local), function (err1) {
						FS.writeFile(local, empty, function (err2) {
							if (typeof completed === 'function') completed.apply(null, [err1 || err2]);
						});
					});
				});
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.rename = function (source, dest, completed) {
		var self = this;

		if (self.isConnected()) {
			self.sftp.rename(source, dest, function (err) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
				} else {
					FS.rename(self.client.toLocal(source), self.client.toLocal(dest), function (err) {
						if (typeof completed === 'function') completed.apply(null, [err]);
					});
				}
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype['delete'] = function (path, completed) {
		var self = this;

		if (self.isConnected()) {
			self.sftp.stat(path, function (err, stats) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
					return;
				}

				if (stats.isFile()) {
					// File
					self.sftp.unlink(path, function (err) {
						if (typeof completed === 'function') completed.apply(null, [err, [{ name: path, type: 'f' }]]);
					});
				} else {
					// Directory
					self.list(path, true, function (err, list) {
						list.forEach(function (item) {
							item.depth = item.name.replace(/^\/+/, '').replace(/\/+$/).split('/').length;
						});
						list.sort(function (a, b) {
							if (a.depth == b.depth) return 0;
							return a.depth > b.depth ? -1 : 1;
						});

						var done = 0;

						var e = function e() {
							self.sftp.rmdir(path, function (err) {
								if (typeof completed === 'function') completed.apply(null, [err, list]);
							});
						};
						list.forEach(function (item) {
							++done;
							var fn = item.type == 'd' || item.type == 'l' ? 'rmdir' : 'unlink';
							self.sftp[fn](item.name, function (err) {
								if (--done == 0) return e();
							});
						});
						if (list.length == 0) e();
					});
				}
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	return ConnectorSFTP;
})();
//# sourceMappingURL=data:application/json;base64,