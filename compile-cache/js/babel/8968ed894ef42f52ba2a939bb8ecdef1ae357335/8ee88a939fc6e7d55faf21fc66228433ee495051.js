var __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
	for (var key in parent) {
		if (__hasProp.call(parent, key)) child[key] = parent[key];
	}function ctor() {
		this.constructor = child;
	}ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    events = require('events'),
    error = function error(callback) {
	if (typeof callback === 'function') callback.apply(this, ['Abstract connector']);
};

module.exports = (function () {

	__extends(Connector, events.EventEmitter);

	function Connector(client) {
		var self = this;
		self.client = client;
	}

	Connector.prototype.client = null;

	Connector.prototype.isConnected = function () {
		return false;
	};

	Connector.prototype.info = {};

	Connector.prototype.connect = function (info, completed) {
		error(completed);

		return this;
	};

	Connector.prototype.disconnect = function (completed) {
		error(completed);

		return this;
	};

	Connector.prototype.abort = function (completed) {
		error(callback);

		return this;
	};

	Connector.prototype.list = function (path, recursive, completed) {
		error(completed);

		return this;
	};

	Connector.prototype.get = function (path, recursive, completed, progress) {
		error(callback);

		return this;
	};

	Connector.prototype.put = function (path, completed, progress) {
		error(completed);

		return this;
	};

	Connector.prototype.mkdir = function (path, completed) {
		error(completed);

		return this;
	};

	Connector.prototype.mkfile = function (path, completed) {
		error(completed);

		return this;
	};

	Connector.prototype.rename = function (source, dest, completed) {
		error(completed);

		return this;
	};

	Connector.prototype['delete'] = function (path, completed) {
		error(completed);

		return this;
	};

	return Connector;
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi9jb25uZWN0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsQ0FBQSxHQUFFLENBQUMsY0FBYztJQUNoQyxTQUFTLEdBQUcsU0FBWixTQUFTLENBQVksS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUFFLE1BQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO0FBQUUsTUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQUUsQUFBQyxTQUFTLElBQUksR0FBRztBQUFFLE1BQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0VBQUUsQUFBQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxPQUFPLEtBQUssQ0FBQztDQUFFO0lBQy9SLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQzFCLEtBQUssR0FBRyxTQUFSLEtBQUssQ0FBYSxRQUFRLEVBQUU7QUFDM0IsS0FBSSxPQUFPLFFBQVEsS0FBSyxVQUFVLEVBQ2pDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0NBQzlDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLFlBQVk7O0FBRTdCLFVBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUUxQyxVQUFTLFNBQVMsQ0FBRSxNQUFNLEVBQUU7QUFDM0IsTUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2hCLE1BQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0VBQ3JCOztBQUVELFVBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzs7QUFFbEMsVUFBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsWUFBWTtBQUM3QyxTQUFPLEtBQUssQ0FBQztFQUNiLENBQUM7O0FBRUYsVUFBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDOztBQUU5QixVQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFVLElBQUksRUFBRSxTQUFTLEVBQUU7QUFDeEQsT0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUVqQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUE7O0FBRUQsVUFBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxTQUFTLEVBQUU7QUFDckQsT0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUVqQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUE7O0FBRUQsVUFBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxTQUFTLEVBQUU7QUFDaEQsT0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUVoQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUE7O0FBRUQsVUFBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRTtBQUNoRSxPQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRWpCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQTs7QUFFRCxVQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFVLElBQUksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRTtBQUN6RSxPQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRWhCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQTs7QUFFRCxVQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFVLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFO0FBQzlELE9BQUssQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFakIsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFBOztBQUVELFVBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsSUFBSSxFQUFFLFNBQVMsRUFBRTtBQUN0RCxPQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRWpCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQTs7QUFFRCxVQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLElBQUksRUFBRSxTQUFTLEVBQUU7QUFDdkQsT0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUVqQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUE7O0FBRUQsVUFBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtBQUMvRCxPQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRWpCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQTs7QUFFRCxVQUFTLENBQUMsU0FBUyxVQUFPLEdBQUcsVUFBVSxJQUFJLEVBQUUsU0FBUyxFQUFFO0FBQ3ZELE9BQUssQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFakIsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFBOztBQUVELFFBQU8sU0FBUyxDQUFDO0NBQ2pCLENBQUEsRUFBRyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi9jb25uZWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG5cdF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuXHRldmVudHMgPSByZXF1aXJlKCdldmVudHMnKSxcblx0ZXJyb3IgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0Y2FsbGJhY2suYXBwbHkodGhpcywgWydBYnN0cmFjdCBjb25uZWN0b3InXSk7XG5cdH07XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcblxuXHRfX2V4dGVuZHMoQ29ubmVjdG9yLCBldmVudHMuRXZlbnRFbWl0dGVyKTtcblxuXHRmdW5jdGlvbiBDb25uZWN0b3IgKGNsaWVudCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRzZWxmLmNsaWVudCA9IGNsaWVudDtcblx0fVxuXG5cdENvbm5lY3Rvci5wcm90b3R5cGUuY2xpZW50ID0gbnVsbDtcblxuXHRDb25uZWN0b3IucHJvdG90eXBlLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRDb25uZWN0b3IucHJvdG90eXBlLmluZm8gPSB7fTtcblxuXHRDb25uZWN0b3IucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoaW5mbywgY29tcGxldGVkKSB7XG5cdFx0ZXJyb3IoY29tcGxldGVkKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Q29ubmVjdG9yLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKGNvbXBsZXRlZCkge1xuXHRcdGVycm9yKGNvbXBsZXRlZCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdENvbm5lY3Rvci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoY29tcGxldGVkKSB7XG5cdFx0ZXJyb3IoY2FsbGJhY2spO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRDb25uZWN0b3IucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAocGF0aCwgcmVjdXJzaXZlLCBjb21wbGV0ZWQpIHtcblx0XHRlcnJvcihjb21wbGV0ZWQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRDb25uZWN0b3IucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXRoLCByZWN1cnNpdmUsIGNvbXBsZXRlZCwgcHJvZ3Jlc3MpIHtcblx0XHRlcnJvcihjYWxsYmFjayk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdENvbm5lY3Rvci5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHBhdGgsIGNvbXBsZXRlZCwgcHJvZ3Jlc3MpIHtcblx0XHRlcnJvcihjb21wbGV0ZWQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRDb25uZWN0b3IucHJvdG90eXBlLm1rZGlyID0gZnVuY3Rpb24gKHBhdGgsIGNvbXBsZXRlZCkge1xuXHRcdGVycm9yKGNvbXBsZXRlZCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdENvbm5lY3Rvci5wcm90b3R5cGUubWtmaWxlID0gZnVuY3Rpb24gKHBhdGgsIGNvbXBsZXRlZCkge1xuXHRcdGVycm9yKGNvbXBsZXRlZCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdENvbm5lY3Rvci5wcm90b3R5cGUucmVuYW1lID0gZnVuY3Rpb24gKHNvdXJjZSwgZGVzdCwgY29tcGxldGVkKSB7XG5cdFx0ZXJyb3IoY29tcGxldGVkKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Q29ubmVjdG9yLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocGF0aCwgY29tcGxldGVkKSB7XG5cdFx0ZXJyb3IoY29tcGxldGVkKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cmV0dXJuIENvbm5lY3Rvcjtcbn0pKCk7XG4iXX0=