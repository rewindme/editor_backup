var __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
	for (var key in parent) {
		if (__hasProp.call(parent, key)) child[key] = parent[key];
	}function ctor() {
		this.constructor = child;
	}ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    path = require('path'),
    $ = require('atom').$,
    View = require('atom').View,
    EditorView = require('atom').EditorView;

module.exports = Dialog = (function (parent) {

	__extends(Dialog, parent);

	function Dialog() {

		Dialog.__super__.constructor.apply(this, arguments);
	}

	Dialog.content = function (opts) {
		opts = opts || {};
		return this.div({
			'class': 'tree-view-dialog overlay from-top'
		}, (function () {
			this.label(opts.prompt, {
				'class': 'icon',
				'outlet': 'text'
			});
			this.subview('miniEditor', new EditorView({
				mini: true
			}));
			this.div({
				'class': 'error-message',
				'outlet': 'error'
			});
		}).bind(this));
	};

	Dialog.prototype.initialize = function (opts) {
		var self = this;

		opts = opts || {};
		this.prompt = opts.prompt || '';
		this.initialPath = opts.initialPath || '';
		this.select = opts.select || false;
		this.iconClass = opts.iconClass || '';

		if (this.iconClass) self.text.addClass(this.iconClass);
		self.on('core:confirm', function () {
			self.onConfirm(self.miniEditor.getText());
		});
		self.on('core:cancel', function () {
			self.cancel();
		});
		self.miniEditor.hiddenInput.on('focusout', function () {
			self.close();
		});
		self.miniEditor.getEditor().getBuffer().on('changed', function () {
			self.showError();
		});
		if (this.initialPath) self.miniEditor.setText(this.initialPath);

		if (this.select) {
			var ext = path.extname(this.initialPath),
			    name = path.basename(this.initialPath),
			    selEnd;
			if (name === ext) selEnd = this.initialPath.length;else selEnd = this.initialPath.length - ext.length;
			var range = [[0, this.initialPath.length - name.length], [0, selEnd]];
			self.miniEditor.getEditor().setSelectedBufferRange(range);
		}
	};

	Dialog.prototype.attach = function () {
		this.panel = atom.workspace.addModalPanel({ item: this.element });
		this.miniEditor.focus();
		this.miniEditor.scrollToCursorPosition();
	};

	Dialog.prototype.close = function () {
		var destroyPanel = this.panel;

		this.panel = null;

		if (destroyPanel) destroyPanel.destroy();

		atom.workspace.getActivePane().activate();
	};

	Dialog.prototype.cancel = function () {
		this.close();
		$('.ftp-view').focus();
	};

	Dialog.prototype.showError = function (message) {
		this.error.text(message);
		if (message) this.flashError();
	};

	return Dialog;
})(View);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi9kaWFsb2dzL2RpYWxvZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFNBQVMsR0FBRyxDQUFBLEdBQUUsQ0FBQyxjQUFjO0lBQ2hDLFNBQVMsR0FBRyxTQUFaLFNBQVMsQ0FBWSxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQUUsTUFBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUU7QUFBRSxNQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7RUFBRSxBQUFDLFNBQVMsSUFBSSxHQUFHO0FBQUUsTUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7RUFBRSxBQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxBQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxBQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxBQUFDLE9BQU8sS0FBSyxDQUFDO0NBQUU7SUFDL1IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDdEIsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSTtJQUMzQixVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQzs7QUFFekMsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRTs7QUFFNUMsVUFBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQzs7QUFFMUIsVUFBUyxNQUFNLEdBQUk7O0FBRWxCLFFBQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxD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QztBQUN6QixNQUFJLE9BQU8sRUFDVixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7RUFDbkIsQ0FBQTs7QUFFRCxRQUFPLE1BQU0sQ0FBQztDQUVkLENBQUEsQ0FBRSxJQUFJLENBQUMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvbmF2ZXIvLmF0b20vcGFja2FnZXMvcmVtb3RlLWZ0cC9saWIvZGlhbG9ncy9kaWFsb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG5cdF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuXHRwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuXHQkID0gcmVxdWlyZSgnYXRvbScpLiQsXG5cdFZpZXcgPSByZXF1aXJlKCdhdG9tJykuVmlldyxcblx0RWRpdG9yVmlldyA9IHJlcXVpcmUoJ2F0b20nKS5FZGl0b3JWaWV3O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpYWxvZyA9IChmdW5jdGlvbiAocGFyZW50KSB7XG5cblx0X19leHRlbmRzKERpYWxvZywgcGFyZW50KTtcblxuXHRmdW5jdGlvbiBEaWFsb2cgKCkge1xuXG5cdFx0RGlhbG9nLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG5cdH1cblxuXHREaWFsb2cuY29udGVudCA9IGZ1bmN0aW9uIChvcHRzKSB7XG5cdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFx0cmV0dXJuIHRoaXMuZGl2KHtcblx0XHRcdCdjbGFzcyc6ICd0cmVlLXZpZXctZGlhbG9nIG92ZXJsYXkgZnJvbS10b3AnXG5cdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5sYWJlbChvcHRzLnByb21wdCwge1xuXHRcdFx0XHQnY2xhc3MnOiAnaWNvbicsXG5cdFx0XHRcdCdvdXRsZXQnOiAndGV4dCdcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5zdWJ2aWV3KCdtaW5pRWRpdG9yJywgbmV3IEVkaXRvclZpZXcoe1xuXHRcdFx0XHRtaW5pOiB0cnVlXG5cdFx0XHR9KSk7XG5cdFx0XHR0aGlzLmRpdih7XG5cdFx0XHRcdCdjbGFzcyc6ICdlcnJvci1tZXNzYWdlJyxcblx0XHRcdFx0J291dGxldCc6ICdlcnJvcidcblx0XHRcdH0pO1xuXHRcdH0uYmluZCh0aGlzKSk7XG5cdH1cblxuXHREaWFsb2cucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAob3B0cykge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHRoaXMucHJvbXB0ID0gb3B0cy5wcm9tcHQgfHwgJyc7XG5cdFx0dGhpcy5pbml0aWFsUGF0aCA9IG9wdHMuaW5pdGlhbFBhdGggfHwgJyc7XG5cdFx0dGhpcy5zZWxlY3QgPSBvcHRzLnNlbGVjdCB8fCBmYWxzZTtcblx0XHR0aGlzLmljb25DbGFzcyA9IG9wdHMuaWNvbkNsYXNzIHx8ICcnO1xuXG5cdFx0aWYgKHRoaXMuaWNvbkNsYXNzKVxuXHRcdFx0c2VsZi50ZXh0LmFkZENsYXNzKHRoaXMuaWNvbkNsYXNzKTtcblx0XHRzZWxmLm9uKCdjb3JlOmNvbmZpcm0nLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLm9uQ29uZmlybShzZWxmLm1pbmlFZGl0b3IuZ2V0VGV4dCgpKTtcblx0XHR9KTtcblx0XHRzZWxmLm9uKCdjb3JlOmNhbmNlbCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuY2FuY2VsKCk7XG5cdFx0fSk7XG5cdFx0c2VsZi5taW5pRWRpdG9yLmhpZGRlbklucHV0Lm9uKCdmb2N1c291dCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHR9KTtcblx0XHRzZWxmLm1pbmlFZGl0b3IuZ2V0RWRpdG9yKCkuZ2V0QnVmZmVyKCkub24oJ2NoYW5nZWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLnNob3dFcnJvcigpO1xuXHRcdH0pO1xuXHRcdGlmICh0aGlzLmluaXRpYWxQYXRoKVxuXHRcdFx0c2VsZi5taW5pRWRpdG9yLnNldFRleHQodGhpcy5pbml0aWFsUGF0aCk7XG5cblx0XHRpZiAodGhpcy5zZWxlY3QpIHtcblx0XHRcdHZhciBleHQgPSBwYXRoLmV4dG5hbWUodGhpcy5pbml0aWFsUGF0aCksXG5cdFx0XHRcdG5hbWUgPSBwYXRoLmJhc2VuYW1lKHRoaXMuaW5pdGlhbFBhdGgpLFxuXHRcdFx0XHRzZWxFbmQ7XG5cdFx0XHRpZiAobmFtZSA9PT0gZXh0KVxuXHRcdFx0XHRzZWxFbmQgPSB0aGlzLmluaXRpYWxQYXRoLmxlbmd0aDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0c2VsRW5kID0gdGhpcy5pbml0aWFsUGF0aC5sZW5ndGggLSBleHQubGVuZ3RoO1xuXHRcdFx0dmFyIHJhbmdlID0gW1swLCB0aGlzLmluaXRpYWxQYXRoLmxlbmd0aCAtIG5hbWUubGVuZ3RoXSwgWzAsIHNlbEVuZF1dO1xuXHRcdFx0c2VsZi5taW5pRWRpdG9yLmdldEVkaXRvcigpLnNldFNlbGVjdGVkQnVmZmVyUmFuZ2UocmFuZ2UpO1xuXHRcdH1cblx0fVxuXG5cdERpYWxvZy5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMucGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKHtpdGVtOiB0aGlzLmVsZW1lbnR9KTtcblx0XHR0aGlzLm1pbmlFZGl0b3IuZm9jdXMoKTtcblx0XHR0aGlzLm1pbmlFZGl0b3Iuc2Nyb2xsVG9DdXJzb3JQb3NpdGlvbigpO1xuXHR9XG5cblx0RGlhbG9nLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgZGVzdHJveVBhbmVsID0gdGhpcy5wYW5lbDtcblxuXHRcdHRoaXMucGFuZWwgPSBudWxsO1xuXG5cdFx0aWYgKGRlc3Ryb3lQYW5lbClcblx0XHRcdGRlc3Ryb3lQYW5lbC5kZXN0cm95KCk7XG5cblx0XHRhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lKCkuYWN0aXZhdGUoKTtcblx0fVxuXG5cdERpYWxvZy5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuY2xvc2UoKTtcblx0XHQkKCcuZnRwLXZpZXcnKS5mb2N1cygpO1xuXHR9XG5cblx0RGlhbG9nLnByb3RvdHlwZS5zaG93RXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXHRcdHRoaXMuZXJyb3IudGV4dChtZXNzYWdlKTtcblx0XHRpZiAobWVzc2FnZSlcblx0XHRcdHRoaXMuZmxhc2hFcnJvcigpO1xuXHR9XG5cblx0cmV0dXJuIERpYWxvZztcblxufSkoVmlldyk7XG4iXX0=