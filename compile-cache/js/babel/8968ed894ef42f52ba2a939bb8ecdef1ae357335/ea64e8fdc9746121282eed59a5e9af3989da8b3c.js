var __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
	for (var key in parent) {
		if (__hasProp.call(parent, key)) child[key] = parent[key];
	}function ctor() {
		this.constructor = child;
	}ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    fs = require('fs-plus'),
    path = require('path'),
    Model = require('theorist').Model;

module.exports = File = (function (parent) {
	__extends(File, parent);

	File.properties({
		parent: null,
		name: '',
		client: null,
		status: 0,
		size: 0,
		date: null,
		type: null
	});

	File.prototype.accessor('local', function () {
		if (this.parent) return path.normalize(path.join(this.parent.local, this.name)).replace(/\\/g, '/');
		throw 'File needs to be in a Directory';
	});

	File.prototype.accessor('remote', function () {
		if (this.parent) return path.normalize(path.join(this.parent.remote, this.name)).replace(/\\/g, '/');
		throw 'File needs to be in a Directory';
	});

	File.prototype.accessor('root', function () {
		if (this.parent) return this.parent.root;
		return this;
	});

	function File() {
		File.__super__.constructor.apply(this, arguments);

		if (fs.isReadmePath(this.path)) this.type = 'readme';else if (fs.isCompressedExtension(this.path)) this.type = 'compressed';else if (fs.isImageExtension(this.path)) this.type = 'image';else if (fs.isPdfExtension(this.path)) this.type = 'pdf';else if (fs.isBinaryExtension(this.path)) this.type = 'binary';else this.type = 'text';
	}

	File.prototype.open = function () {
		var self = this,
		    client = self.root.client;

		client.download(self.remote, false, function (err) {
			if (err) return;
			atom.workspace.open(self.local);
		});
	};

	return File;
})(Model);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi9maWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksU0FBUyxHQUFHLENBQUEsR0FBRSxDQUFDLGNBQWM7SUFDaEMsU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFZLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFBRSxNQUFLLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRTtBQUFFLE1BQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUFFLEFBQUMsU0FBUyxJQUFJLEdBQUc7QUFBRSxNQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztFQUFFLEFBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEFBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLEFBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEFBQUMsT0FBTyxLQUFLLENBQUM7Q0FBRTtJQUMvUixFQUFFLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUN2QixJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN0QixLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFbkMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUMxQyxVQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDOztBQUV4QixLQUFJLENBQUMsVUFBVSxDQUFDO0FBQ2YsUUFBTSxFQUFFLElBQUk7QUFDWixNQUFJLEVBQUUsRUFBRTtBQUNSLFFBQU0sRUFBRSxJQUFJO0FBQ1osUUFBTSxFQUFFLENBQUM7QUFDVCxNQUFJLEVBQUUsQ0FBQztBQUNQLE1BQUksRUFBRSxJQUFJO0FBQ1YsTUFBSSxFQUFFLElBQUk7RUFDVixDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFlBQVk7QUFDNUMsTUFBSSxJQUFJLENBQUMsTUFBTSxFQUNkLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEYsUUFBTSxpQ0FBaUMsQ0FBQztFQUN4QyxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQVk7QUFDN0MsTUFBSSxJQUFJLENBQUMsTUFBTSxFQUNkLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckYsUUFBTSxpQ0FBaUMsQ0FBQztFQUN4QyxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLFlBQVk7QUFDM0MsTUFBSSxJQUFJLENBQUMsTUFBTSxFQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDekIsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDLENBQUM7O0FBRUgsVUFBUyxJQUFJLEdBQUk7QUFDaEIsTUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQzs7QUFFbEQsTUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FDakIsSUFBSSxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUMzQyxJQUFJLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxLQUNyQixJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQ2hCLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3BDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQ2QsSUFBSSxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUN2QyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUVyQixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztFQUNwQjs7QUFFRCxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ2pDLE1BQUksSUFBSSxHQUFHLElBQUk7TUFDZCxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7O0FBRTNCLFFBQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxHQUFHLEVBQUU7QUFDbEQsT0FBSSxHQUFHLEVBQ04sT0FBTztBQUNSLE9BQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNoQyxDQUFDLENBQUM7RUFDSCxDQUFBOztBQUVELFFBQU8sSUFBSSxDQUFDO0NBRVosQ0FBQSxDQUFFLEtBQUssQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi9maWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuXHRfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcblx0ZnMgPSByZXF1aXJlKCdmcy1wbHVzJyksXG5cdHBhdGggPSByZXF1aXJlKCdwYXRoJyksXG5cdE1vZGVsID0gcmVxdWlyZSgndGhlb3Jpc3QnKS5Nb2RlbDtcblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlID0gKGZ1bmN0aW9uIChwYXJlbnQpIHtcblx0X19leHRlbmRzKEZpbGUsIHBhcmVudCk7XG5cblx0RmlsZS5wcm9wZXJ0aWVzKHtcblx0XHRwYXJlbnQ6IG51bGwsXG5cdFx0bmFtZTogJycsXG5cdFx0Y2xpZW50OiBudWxsLFxuXHRcdHN0YXR1czogMCxcblx0XHRzaXplOiAwLFxuXHRcdGRhdGU6IG51bGwsXG5cdFx0dHlwZTogbnVsbFxuXHR9KTtcblxuXHRGaWxlLnByb3RvdHlwZS5hY2Nlc3NvcignbG9jYWwnLCBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMucGFyZW50KVxuXHRcdFx0cmV0dXJuIHBhdGgubm9ybWFsaXplKHBhdGguam9pbih0aGlzLnBhcmVudC5sb2NhbCwgdGhpcy5uYW1lKSkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuXHRcdHRocm93IFwiRmlsZSBuZWVkcyB0byBiZSBpbiBhIERpcmVjdG9yeVwiO1xuXHR9KTtcblxuXHRGaWxlLnByb3RvdHlwZS5hY2Nlc3NvcigncmVtb3RlJywgZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLnBhcmVudClcblx0XHRcdHJldHVybiBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4odGhpcy5wYXJlbnQucmVtb3RlLCB0aGlzLm5hbWUpKS5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG5cdFx0dGhyb3cgXCJGaWxlIG5lZWRzIHRvIGJlIGluIGEgRGlyZWN0b3J5XCI7XG5cdH0pO1xuXG5cdEZpbGUucHJvdG90eXBlLmFjY2Vzc29yKCdyb290JywgZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLnBhcmVudClcblx0XHRcdHJldHVybiB0aGlzLnBhcmVudC5yb290O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBGaWxlICgpIHtcblx0XHRGaWxlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG5cdFx0aWYgKGZzLmlzUmVhZG1lUGF0aCh0aGlzLnBhdGgpKVxuXHRcdFx0dGhpcy50eXBlID0gJ3JlYWRtZSc7XG5cdFx0ZWxzZSBpZiAoZnMuaXNDb21wcmVzc2VkRXh0ZW5zaW9uKHRoaXMucGF0aCkpXG5cdFx0XHR0aGlzLnR5cGUgPSAnY29tcHJlc3NlZCc7XG5cdFx0ZWxzZSBpZiAoZnMuaXNJbWFnZUV4dGVuc2lvbih0aGlzLnBhdGgpKVxuXHRcdFx0dGhpcy50eXBlID0gJ2ltYWdlJztcblx0XHRlbHNlIGlmIChmcy5pc1BkZkV4dGVuc2lvbih0aGlzLnBhdGgpKVxuXHRcdFx0dGhpcy50eXBlID0gJ3BkZic7XG5cdFx0ZWxzZSBpZiAoZnMuaXNCaW5hcnlFeHRlbnNpb24odGhpcy5wYXRoKSlcblx0XHRcdHRoaXMudHlwZSA9ICdiaW5hcnknO1xuXHRcdGVsc2Vcblx0XHRcdHRoaXMudHlwZSA9ICd0ZXh0Jztcblx0fVxuXG5cdEZpbGUucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0Y2xpZW50ID0gc2VsZi5yb290LmNsaWVudDtcblxuXHRcdGNsaWVudC5kb3dubG9hZChzZWxmLnJlbW90ZSwgZmFsc2UsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdGlmIChlcnIpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGF0b20ud29ya3NwYWNlLm9wZW4oc2VsZi5sb2NhbCk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gRmlsZTtcblxufSkoTW9kZWwpO1xuIl19