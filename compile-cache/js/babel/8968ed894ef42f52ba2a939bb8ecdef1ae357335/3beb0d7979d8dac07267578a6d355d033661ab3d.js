var DeprecationView,
    View,
    __bind = function __bind(fn, me) {
  return function () {
    return fn.apply(me, arguments);
  };
},
    __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
  for (var key in parent) {
    if (__hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
};

View = require("atom").View;

module.exports = DeprecationView = (function (_super) {
  __extends(DeprecationView, _super);

  function DeprecationView() {
    this.close = __bind(this.close, this);
    return DeprecationView.__super__.constructor.apply(this, arguments);
  }

  DeprecationView.content = function () {
    return this.div({
      "class": "coffeescript-preview deprecation-notice"
    }, (function (_this) {
      return function () {
        return _this.div({
          "class": "overlay from-top"
        }, function () {
          return _this.div({
            "class": "tool-panel panel-bottom"
          }, function () {
            return _this.div({
              "class": "inset-panel"
            }, function () {
              _this.div({
                "class": "panel-heading"
              }, function () {
                _this.div({
                  "class": "btn-toolbar pull-right"
                }, function () {
                  return _this.button({
                    "class": "btn",
                    click: "close"
                  }, "Close");
                });
                return _this.span({
                  "class": "text-error"
                }, "IMPORTANT: CoffeeScript Preview has been Depttrecated!");
              });
              return _this.div({
                "class": "panel-body padded"
              }, function () {
                _this.span({
                  "class": "text-warning"
                }, "CoffeeScript Preview has been deprecated. Please migrate to the Preview package for Atom. ");
                return _this.a({
                  href: "https://github.com/Glavin001/atom-preview"
                }, "Click here to see the Preview package for Atom");
              });
            });
          });
        });
      };
    })(this));
  };

  DeprecationView.prototype.close = function (event, element) {
    return this.detach();
  };

  return DeprecationView;
})(View);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9wcmV2aWV3L3NwZWMvc2FtcGxlcy9zcGFjZXBlbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLGVBQWU7SUFBRSxJQUFJO0lBQ3ZCLE1BQU0sR0FBRyxTQUFULE1BQU0sQ0FBWSxFQUFFLEVBQUUsRUFBRSxFQUFDO0FBQUUsU0FBTyxZQUFVO0FBQUUsV0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztHQUFFLENBQUM7Q0FBRTtJQUNsRixTQUFTLEdBQUcsQ0FBQSxHQUFFLENBQUMsY0FBYztJQUM3QixTQUFTLEdBQUcsU0FBWixTQUFTLENBQVksS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUFFLE9BQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO0FBQUUsUUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQUUsQUFBQyxTQUFTLElBQUksR0FBRztBQUFFLFFBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0dBQUUsQUFBQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxPQUFPLEtBQUssQ0FBQztDQUFFLENBQUM7O0FBRWxTLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDOztBQUU1QixNQUFNLENBQUMsT0FBTyxHQUFHLGVBQWUsR0FBRyxDQUFDLFVBQVMsTUFBTSxFQUFFO0FBQ25ELFdBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRW5DLFdBQVMsZUFBZSxHQUFHO0FBQ3pCLFFBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEMsV0FBTyxlQUFlLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3JFOztBQUVELGlCQUFlLENBQUMsT0FBTyxHQUFHLFlBQVc7QUFDbkMsV0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ2QsYUFBTyxFQUFFLHlDQUF5QztLQUNuRCxFQUFFLENBQUMsVUFBUyxLQUFLLEVBQUU7QUFDbEIsYUFBTyxZQUFXO0FBQ2hCLGVBQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNmLGlCQUFPLEVBQUUsa0JBQWtCO1NBQzVCLEVBQUUsWUFBVztBQUNaLGlCQUFPLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDZixtQkFBTyxFQUFFLHlCQUF5QjtXQUNuQyxFQUFFLFlBQVc7QUFDWixtQkFBTyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2YscUJBQU8sRUFBRSxhQUFhO2FBQ3ZCLEVBQUUsWUFBVztBQUNaLG1CQUFLLENBQUMsR0FBRyxDQUFDO0FBQ1IsdUJBQU8sRUFBRSxlQUFlO2VBQ3pCLEVBQUUsWUFBVztBQUNaLHFCQUFLLENBQUMsR0FBRyxDQUFDO0FBQ1IseUJBQU8sRUFBRSx3QkFBd0I7aUJBQ2xDLEVBQUUsWUFBVztBQUNaLHlCQUFPLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDbEIsMkJBQU8sRUFBRSxLQUFLO0FBQ2QseUJBQUssRUFBRSxPQUFPO21CQUNmLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQ2IsQ0FBQyxDQUFDO0FBQ0gsdUJBQU8sS0FBSyxDQUFDLElBQUksQ0FBQztBQUNoQix5QkFBTyxFQUFFLFlBQVk7aUJBQ3RCLEVBQUUsd0RBQXdELENBQUMsQ0FBQztlQUM5RCxDQUFDLENBQUM7QUFDSCxxQkFBTyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2YsdUJBQU8sRUFBRSxtQkFBbUI7ZUFDN0IsRUFBRSxZQUFXO0FBQ1oscUJBQUssQ0FBQyxJQUFJLENBQUM7QUFDVCx5QkFBTyxFQUFFLGNBQWM7aUJBQ3hCLEVBQUUsNEZBQTRGLENBQUMsQ0FBQztBQUNqRyx1QkFBTyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2Isc0JBQUksRUFBRSwyQ0FBMkM7aUJBQ2xELEVBQUUsZ0RBQWdELENBQUMsQ0FBQztlQUN0RCxDQUFDLENBQUM7YUFDSixDQUFDLENBQUM7V0FDSixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7T0FDSixDQUFDO0tBQ0gsQ0FBQSxDQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7R0FDWCxDQUFDOztBQUVGLGlCQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUU7QUFDekQsV0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7R0FDdEIsQ0FBQzs7QUFFRixTQUFPLGVBQWUsQ0FBQztDQUV4QixDQUFBLENBQUUsSUFBSSxDQUFDLENBQUMiLCJmaWxlIjoiL1VzZXJzL25hdmVyLy5hdG9tL3BhY2thZ2VzL3ByZXZpZXcvc3BlYy9zYW1wbGVzL3NwYWNlcGVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIERlcHJlY2F0aW9uVmlldywgVmlldyxcbiAgX19iaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG5WaWV3ID0gcmVxdWlyZShcImF0b21cIikuVmlldztcblxubW9kdWxlLmV4cG9ydHMgPSBEZXByZWNhdGlvblZpZXcgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gIF9fZXh0ZW5kcyhEZXByZWNhdGlvblZpZXcsIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gRGVwcmVjYXRpb25WaWV3KCkge1xuICAgIHRoaXMuY2xvc2UgPSBfX2JpbmQodGhpcy5jbG9zZSwgdGhpcyk7XG4gICAgcmV0dXJuIERlcHJlY2F0aW9uVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIERlcHJlY2F0aW9uVmlldy5jb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2KHtcbiAgICAgIFwiY2xhc3NcIjogJ2NvZmZlZXNjcmlwdC1wcmV2aWV3IGRlcHJlY2F0aW9uLW5vdGljZSdcbiAgICB9LCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmRpdih7XG4gICAgICAgICAgXCJjbGFzc1wiOiAnb3ZlcmxheSBmcm9tLXRvcCdcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmRpdih7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidG9vbC1wYW5lbCBwYW5lbC1ib3R0b21cIlxuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRpdih7XG4gICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJpbnNldC1wYW5lbFwiXG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMuZGl2KHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwicGFuZWwtaGVhZGluZ1wiXG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmRpdih7XG4gICAgICAgICAgICAgICAgICBcImNsYXNzXCI6ICdidG4tdG9vbGJhciBwdWxsLXJpZ2h0J1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogJ2J0bicsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiAnY2xvc2UnXG4gICAgICAgICAgICAgICAgICB9LCAnQ2xvc2UnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc3Bhbih7XG4gICAgICAgICAgICAgICAgICBcImNsYXNzXCI6ICd0ZXh0LWVycm9yJ1xuICAgICAgICAgICAgICAgIH0sICdJTVBPUlRBTlQ6IENvZmZlZVNjcmlwdCBQcmV2aWV3IGhhcyBiZWVuIERlcHR0cmVjYXRlZCEnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5kaXYoe1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwYW5lbC1ib2R5IHBhZGRlZFwiXG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNwYW4oe1xuICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiAndGV4dC13YXJuaW5nJ1xuICAgICAgICAgICAgICAgIH0sICdDb2ZmZWVTY3JpcHQgUHJldmlldyBoYXMgYmVlbiBkZXByZWNhdGVkLiBQbGVhc2UgbWlncmF0ZSB0byB0aGUgUHJldmlldyBwYWNrYWdlIGZvciBBdG9tLiAnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYSh7XG4gICAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9naXRodWIuY29tL0dsYXZpbjAwMS9hdG9tLXByZXZpZXcnXG4gICAgICAgICAgICAgICAgfSwgXCJDbGljayBoZXJlIHRvIHNlZSB0aGUgUHJldmlldyBwYWNrYWdlIGZvciBBdG9tXCIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIERlcHJlY2F0aW9uVmlldy5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbihldmVudCwgZWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmRldGFjaCgpO1xuICB9O1xuXG4gIHJldHVybiBEZXByZWNhdGlvblZpZXc7XG5cbn0pKFZpZXcpO1xuIl19