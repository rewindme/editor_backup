var __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
	for (var key in parent) {
		if (__hasProp.call(parent, key)) child[key] = parent[key];
	}function ctor() {
		this.constructor = child;
	}ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    FS = require('fs-plus'),
    Path = require('path'),
    SSH2 = require('ssh2'),
    Connector = require('../connector');

module.exports = (function () {
	__extends(ConnectorSFTP, Connector);

	function ConnectorSFTP() {
		ConnectorSFTP.__super__.constructor.apply(this, arguments);
		this.ssh2 = null;
		this.sftp = null;
		this.status = 'disconnected';
	}

	ConnectorSFTP.prototype.isConnected = function () {
		var self = this;

		return self.status != 'disconnected' && self.sftp;
	};

	ConnectorSFTP.prototype.connect = function (info, completed) {
		var self = this;
		self.info = info;

		var debug = self.info.debug;
		self.info.debug = true;

		self.status = 'connecting';

		self.ssh2 = new SSH2();
		self.ssh2.on('banner', function (msg, lang) {
			self.emit('greeting', msg);
		});
		self.ssh2.on('ready', function () {
			self.ssh2.sftp(function (err, sftp) {
				if (err) {
					self.disconnect();
					return;
				}

				self.status = 'connected';

				self.sftp = sftp;
				self.sftp.on('end', function () {
					self.disconnect();
					self.emit('ended');
				});

				self.emit('connected');

				if (typeof completed === 'function') completed.apply(self, []);
			});
		});
		self.ssh2.on('end', function () {
			self.disconnect();
			self.emit('ended');
		});
		self.ssh2.on('close', function () {
			self.disconnect();
			self.emit('closed');
		});
		self.ssh2.on('error', function (err) {
			self.emit('error', err);
		});
		self.ssh2.on('debug', function (str) {
			if (typeof debug == 'function') debug.apply(null, [str]);
		});
		self.ssh2.connect(self.info);

		return self;
	};

	ConnectorSFTP.prototype.disconnect = function (completed) {
		var self = this;

		self.status = 'disconnected';

		if (self.sftp) {
			self.sftp.end();
			self.sftp = null;
		}

		if (self.ssh2) {
			self.ssh2.end();
			self.ssh2 = null;
		}

		if (typeof completed === 'function') completed.apply(null, []);

		return self;
	};

	ConnectorSFTP.prototype.abort = function (completed) {

		// TODO find a way to abort current operation

		if (typeof completed === 'function') completed.apply(null, []);

		return this;
	};

	ConnectorSFTP.prototype.list = function (path, recursive, completed) {
		var self = this;

		if (self.isConnected()) {
			if (recursive) {
				var digg = 0,
				    list = [];

				var e = function e() {
					if (typeof completed === 'function') completed.apply(null, [null, list]);
				};
				var l = function l(p) {
					++digg;
					self.sftp.readdir(p, function (err, lis) {
						if (err) return e();

						lis.forEach(function (item) {
							item.filename = Path.join(p, item.filename).replace(/\\/g, '/');
							item.date = new Date();
							item.date.setTime(item.attrs.mtime * 1000);
							list.push({
								name: item.filename,
								type: item.attrs.isFile() ? 'f' : 'd',
								size: item.attrs.size,
								date: item.date
							});
							if (!item.attrs.isFile()) {
								l(item.filename);
							}
						});

						if (--digg == 0) e();
					});
				};
				l(path);
			} else {
				self.sftp.readdir(path, function (err, lis) {
					var list = [];

					if (!err) {
						lis.forEach(function (item) {
							item.filename = Path.join(path, item.filename).replace(/\\/g, '/');
							item.date = new Date();
							item.date.setTime(item.attrs.mtime * 1000);
							list.push({
								name: item.filename,
								type: item.attrs.isFile() ? 'f' : 'd',
								size: item.attrs.size,
								date: item.date
							});
						});
					}

					if (typeof completed === 'function') completed.apply(null, [err, list]);
				});
			}
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return this;
	};

	ConnectorSFTP.prototype.get = function (path, recursive, completed, progress) {
		var self = this,
		    local = self.client.toLocal(path);

		if (self.isConnected()) {
			self.sftp.stat(path, function (err, stats) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
					return;
				}

				if (stats.isFile()) {
					// File
					FS.makeTreeSync(Path.dirname(local));
					self.sftp.fastGet(path, local, {
						step: function step(read, chunk, size) {
							if (typeof progress === 'function') progress.apply(null, [read / size]);
						}
					}, function (err) {
						if (typeof completed === 'function') completed.apply(null, [err]);
						return;
					});
				} else {
					// Directory

					self.list(path, recursive, function (err, list) {
						list.unshift({ name: path, type: 'd' });
						list.forEach(function (item) {
							item.depth = item.name.replace(/^\/+/, '').replace(/\/+$/).split('/').length;
						});
						list.sort(function (a, b) {
							if (a.depth == b.depth) return 0;
							return a.depth > b.depth ? 1 : -1;
						});

						var error = null,
						    total = list.length,
						    i = -1;
						var e = function e() {
							if (typeof completed === 'function') completed.apply(null, [error, list]);
						};
						var n = function n() {
							++i;
							if (typeof progress === 'function') progress.apply(null, [i / total]);

							var item = list.shift();
							if (item == null) return e();
							var local = self.client.toLocal(item.name);
							if (item.type == 'd' || item.type == 'l') {
								//mkdirp(local, function (err) {
								FS.makeTree(local, function (err) {
									if (err) error = err;
									return n();
								});
							} else {
								self.sftp.fastGet(item.name, local, {
									step: function step(read, chunk, size) {
										if (typeof progress === 'function') progress.apply(null, [i / total + read / size / total]);
									}
								}, function (err) {
									if (err) error = err;
									return n();
								});
							}
						};
						n();
					});
				}
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.put = function (path, completed, progress) {
		var self = this,
		    remote = self.client.toRemote(path);

		if (self.isConnected()) {
			// File
			if (FS.isFileSync(path)) {
				var e = function e(err) {
					if (typeof completed === 'function') completed.apply(null, [err ? err : null, [{ name: path, type: 'f' }]]);
				};
				self.sftp.fastPut(path, remote, {
					step: function step(written, chunk, size) {
						if (typeof progress === 'function') progress.apply(null, [written / size]);
					}
				}, function (err) {
					if (err) {
						if (err.type == 'NO_SUCH_FILE') {
							self.mkdir(Path.dirname(remote).replace(/\\/g, '/'), true, function (err) {
								if (err) return e(err);

								self.sftp.fastPut(path, remote, {
									step: function step(written, chunk, size) {
										if (typeof progress === 'function') progress.apply(null, [written / size]);
									}
								}, function (err) {
									return e(err);
								});
							});
							return;
						}
						return e(err);
					}

					return e();
				});
			}

			// Folder
			else {
				self.client._traverseTree(path, function (list) {
					self.mkdir(remote, true, function (err) {
						var error,
						    i = -1,
						    total = list.length;
						var e = function e() {
							if (typeof completed === 'function') completed.apply(null, [error, list]);
						};
						var n = function n() {
							if (++i >= list.length) return e();
							var item = list[i],
							    remote = self.client.toRemote(item.name);
							if (item.type == 'd' || item.type == 'l') {
								self.sftp.mkdir(remote, {}, function (err) {
									if (err) error = err;
									return n();
								});
							} else {
								self.sftp.fastPut(item.name, remote, {
									step: function step(written, chunk, size) {
										if (typeof progress === 'function') progress.apply(null, [i / total + written / size / total]);
									}
								}, function (err) {
									if (err) error = err;
									return n();
								});
							}
						};
						return n();
					});
				});
			}
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.mkdir = function (path, recursive, completed) {
		var self = this,
		    remotes = path.replace(/^\/+/, '').replace(/\/+$/, '').split('/'),
		    dirs = ['/' + remotes.slice(0, remotes.length).join('/')];

		if (self.isConnected()) {
			if (recursive) {
				for (var a = remotes.length - 1; a > 0; --a) dirs.unshift('/' + remotes.slice(0, a).join('/'));
			}

			var n = function n() {
				var dir = dirs.shift(),
				    last = dirs.length == 0;

				self.sftp.mkdir(dir, {}, function (err) {
					if (last) {
						if (typeof completed === 'function') completed.apply(null, [err ? err : null]);
					} else {
						return n();
					}
				});
			};
			n();
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.mkfile = function (path, completed) {
		var self = this,
		    local = self.client.toLocal(path),
		    empty = new Buffer('', 'utf8');

		if (self.isConnected()) {
			self.sftp.open(path, 'w', {}, function (err, handle) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
					return;
				}
				self.sftp.write(handle, empty, 0, 0, 0, function (err) {
					if (err) {
						if (typeof completed === 'function') completed.apply(null, [err]);
						return;
					}
					//mkdirp(Path.dirname(local), function (err1) {
					FS.makeTree(Path.dirname(local), function (err1) {
						FS.writeFile(local, empty, function (err2) {
							if (typeof completed === 'function') completed.apply(null, [err1 || err2]);
						});
					});
				});
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype.rename = function (source, dest, completed) {
		var self = this;

		if (self.isConnected()) {
			self.sftp.rename(source, dest, function (err) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
				} else {
					FS.rename(self.client.toLocal(source), self.client.toLocal(dest), function (err) {
						if (typeof completed === 'function') completed.apply(null, [err]);
					});
				}
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	ConnectorSFTP.prototype['delete'] = function (path, completed) {
		var self = this;

		if (self.isConnected()) {
			self.sftp.stat(path, function (err, stats) {
				if (err) {
					if (typeof completed === 'function') completed.apply(null, [err]);
					return;
				}

				if (stats.isFile()) {
					// File
					self.sftp.unlink(path, function (err) {
						if (typeof completed === 'function') completed.apply(null, [err, [{ name: path, type: 'f' }]]);
					});
				} else {
					// Directory
					self.list(path, true, function (err, list) {
						list.forEach(function (item) {
							item.depth = item.name.replace(/^\/+/, '').replace(/\/+$/).split('/').length;
						});
						list.sort(function (a, b) {
							if (a.depth == b.depth) return 0;
							return a.depth > b.depth ? -1 : 1;
						});

						var done = 0;

						var e = function e() {
							self.sftp.rmdir(path, function (err) {
								if (typeof completed === 'function') completed.apply(null, [err, list]);
							});
						};
						list.forEach(function (item) {
							++done;
							var fn = item.type == 'd' || item.type == 'l' ? 'rmdir' : 'unlink';
							self.sftp[fn](item.name, function (err) {
								if (--done == 0) return e();
							});
						});
						if (list.length == 0) e();
					});
				}
			});
		} else {
			if (typeof completed === 'function') completed.apply(null, ['Not connected']);
		}

		return self;
	};

	return ConnectorSFTP;
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi9jb25uZWN0b3JzL3NmdHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsQ0FBQSxHQUFFLENBQUMsY0FBYztJQUNoQyxTQUFTLEdBQUcsU0FBWixTQUFTLENBQVksS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUFFLE1BQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO0FBQUUsTUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQUUsQUFBQyxTQUFTLElBQUksR0FBRztBQUFFLE1BQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0VBQUUsQUFBQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxPQUFPLEtBQUssQ0FBQztDQUFFO0lBQy9SLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ3ZCLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3RCLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3RCLFNBQVMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBR3JDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxZQUFZO0FBQzdCLFVBQVMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7O0FBRXBDLFVBQVMsYUFBYSxHQUFJO0FBQ3pCLGVBQWEsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDM0QsTUFBSSxD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QUFFO0FBQ3BDLFlBQUksT0FBTyxTQUFTLEtBQUssVUFBVSxFQUNsQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQztPQUNILENBQUE7QUFDRCxVQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQzVCLFNBQUUsSUFBSSxDQUFDO0FBQ1AsV0FBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLEdBQUcsT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUNuRSxXQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxHQUFHLEVBQUU7QUFDdkMsWUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEVBQ2QsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQztPQUNILENBQUMsQ0FBQztBQUNILFVBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQ25CLENBQUMsRUFBRSxDQUFDO01BQ0wsQ0FBQyxDQUFDO0tBQ0g7SUFDRCxDQUFDLENBQUM7R0FDSCxNQUNJO0FBQ0osT0FBSSxPQUFPLFNBQVMsS0FBSyxVQUFVLEVBQ2xDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztHQUMxQzs7QUFFRCxTQUFPLElBQUksQ0FBQztFQUNaLENBQUE7O0FBRUQsUUFBTyxhQUFhLENBQUM7Q0FDckIsQ0FBQSxFQUFHLENBQUMiLCJmaWxlIjoiL1VzZXJzL25hdmVyLy5hdG9tL3BhY2thZ2VzL3JlbW90ZS1mdHAvbGliL2Nvbm5lY3RvcnMvc2Z0cC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcblx0X19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG5cdEZTID0gcmVxdWlyZSgnZnMtcGx1cycpLFxuXHRQYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuXHRTU0gyID0gcmVxdWlyZSgnc3NoMicpLFxuXHRDb25uZWN0b3IgPSByZXF1aXJlKCcuLi9jb25uZWN0b3InKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG5cdF9fZXh0ZW5kcyhDb25uZWN0b3JTRlRQLCBDb25uZWN0b3IpO1xuXG5cdGZ1bmN0aW9uIENvbm5lY3RvclNGVFAgKCkge1xuXHRcdENvbm5lY3RvclNGVFAuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0dGhpcy5zc2gyID0gbnVsbDtcblx0XHR0aGlzLnNmdHAgPSBudWxsO1xuXHRcdHRoaXMuc3RhdHVzID0gJ2Rpc2Nvbm5lY3RlZCc7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5pc0Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRyZXR1cm4gc2VsZi5zdGF0dXMgIT0gJ2Rpc2Nvbm5lY3RlZCcgJiYgc2VsZi5zZnRwO1xuXHR9O1xuXG5cdENvbm5lY3RvclNGVFAucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoaW5mbywgY29tcGxldGVkKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuaW5mbyA9IGluZm87XG5cblx0XHR2YXIgZGVidWcgPSBzZWxmLmluZm8uZGVidWc7XG5cdFx0c2VsZi5pbmZvLmRlYnVnID0gdHJ1ZTtcblxuXHRcdHNlbGYuc3RhdHVzID0gJ2Nvbm5lY3RpbmcnO1xuXG5cdFx0c2VsZi5zc2gyID0gbmV3IFNTSDIoKTtcblx0XHRzZWxmLnNzaDIub24oJ2Jhbm5lcicsIGZ1bmN0aW9uIChtc2csIGxhbmcpIHtcblx0XHRcdHNlbGYuZW1pdCgnZ3JlZXRpbmcnLCBtc2cpO1xuXHRcdH0pO1xuXHRcdHNlbGYuc3NoMi5vbigncmVhZHknLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLnNzaDIuc2Z0cChmdW5jdGlvbiAoZXJyLCBzZnRwKSB7XG5cdFx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0XHRzZWxmLmRpc2Nvbm5lY3QoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzZWxmLnN0YXR1cyA9ICdjb25uZWN0ZWQnO1xuXG5cdFx0XHRcdHNlbGYuc2Z0cCA9IHNmdHA7XG5cdFx0XHRcdHNlbGYuc2Z0cC5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHNlbGYuZGlzY29ubmVjdCgpO1xuXHRcdFx0XHRcdHNlbGYuZW1pdCgnZW5kZWQnKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0c2VsZi5lbWl0KCdjb25uZWN0ZWQnKTtcblxuXHRcdFx0XHRpZiAodHlwZW9mIGNvbXBsZXRlZCA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRjb21wbGV0ZWQuYXBwbHkoc2VsZiwgW10pO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblx0XHRzZWxmLnNzaDIub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuZGlzY29ubmVjdCgpO1xuXHRcdFx0c2VsZi5lbWl0KCdlbmRlZCcpO1xuXHRcdH0pO1xuXHRcdHNlbGYuc3NoMi5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLmRpc2Nvbm5lY3QoKTtcblx0XHRcdHNlbGYuZW1pdCgnY2xvc2VkJyk7XG5cdFx0fSk7XG5cdFx0c2VsZi5zc2gyLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuXHRcdH0pO1xuXHRcdHNlbGYuc3NoMi5vbignZGVidWcnLCBmdW5jdGlvbiAoc3RyKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRlYnVnID09ICdmdW5jdGlvbicpXG5cdFx0XHRcdGRlYnVnLmFwcGx5KG51bGwsIFtzdHJdKTtcblx0XHR9KTtcblx0XHRzZWxmLnNzaDIuY29ubmVjdChzZWxmLmluZm8pO1xuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKGNvbXBsZXRlZCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYuc3RhdHVzID0gJ2Rpc2Nvbm5lY3RlZCc7XG5cblx0XHRpZiAoc2VsZi5zZnRwKSB7XG5cdFx0XHRzZWxmLnNmdHAuZW5kKCk7XG5cdFx0XHRzZWxmLnNmdHAgPSBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChzZWxmLnNzaDIpIHtcblx0XHRcdHNlbGYuc3NoMi5lbmQoKTtcblx0XHRcdHNlbGYuc3NoMiA9IG51bGw7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRjb21wbGV0ZWQuYXBwbHkobnVsbCwgW10pO1xuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uIChjb21wbGV0ZWQpIHtcblxuXHRcdC8vIFRPRE8gZmluZCBhIHdheSB0byBhYm9ydCBjdXJyZW50IG9wZXJhdGlvblxuXG5cdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRjb21wbGV0ZWQuYXBwbHkobnVsbCwgW10pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKHBhdGgsIHJlY3Vyc2l2ZSwgY29tcGxldGVkKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKHNlbGYuaXNDb25uZWN0ZWQoKSkge1xuXHRcdFx0aWYgKHJlY3Vyc2l2ZSkge1xuXHRcdFx0XHR2YXIgZGlnZyA9IDAsXG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdHZhciBlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtudWxsLCBsaXN0XSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGwgPSBmdW5jdGlvbiAocCkge1xuXHRcdFx0XHRcdCsrZGlnZztcblx0XHRcdFx0XHRzZWxmLnNmdHAucmVhZGRpcihwLCBmdW5jdGlvbiAoZXJyLCBsaXMpIHtcblx0XHRcdFx0XHRcdGlmIChlcnIpXG5cdFx0XHRcdFx0XHRcdHJldHVybiBlKCk7XG5cblx0XHRcdFx0XHRcdGxpcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZmlsZW5hbWUgPSBQYXRoLmpvaW4ocCwgaXRlbS5maWxlbmFtZSkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmRhdGUuc2V0VGltZShpdGVtLmF0dHJzLm10aW1lICogMTAwMCk7XG5cdFx0XHRcdFx0XHRcdGxpc3QucHVzaCh7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogaXRlbS5maWxlbmFtZSxcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBpdGVtLmF0dHJzLmlzRmlsZSgpID8gJ2YnIDogJ2QnLFxuXHRcdFx0XHRcdFx0XHRcdHNpemU6IGl0ZW0uYXR0cnMuc2l6ZSxcblx0XHRcdFx0XHRcdFx0XHRkYXRlOiBpdGVtLmRhdGVcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdGlmICghaXRlbS5hdHRycy5pc0ZpbGUoKSkge1xuXHRcdFx0XHRcdFx0XHRcdGwoaXRlbS5maWxlbmFtZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRpZiAoLS1kaWdnID09IDApXG5cdFx0XHRcdFx0XHRcdGUoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsKHBhdGgpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHNlbGYuc2Z0cC5yZWFkZGlyKHBhdGgsIGZ1bmN0aW9uIChlcnIsIGxpcykge1xuXHRcdFx0XHRcdHZhciBsaXN0ID0gW107XG5cblx0XHRcdFx0XHRpZiAoIWVycikge1xuXHRcdFx0XHRcdFx0bGlzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0XHRcdFx0aXRlbS5maWxlbmFtZSA9IFBhdGguam9pbihwYXRoLCBpdGVtLmZpbGVuYW1lKS5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZGF0ZS5zZXRUaW1lKGl0ZW0uYXR0cnMubXRpbWUgKiAxMDAwKTtcblx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiBpdGVtLmZpbGVuYW1lLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IGl0ZW0uYXR0cnMuaXNGaWxlKCkgPyAnZicgOiAnZCcsXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZTogaXRlbS5hdHRycy5zaXplLFxuXHRcdFx0XHRcdFx0XHRcdGRhdGU6IGl0ZW0uZGF0ZVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtlcnIsIGxpc3RdKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbJ05vdCBjb25uZWN0ZWQnXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocGF0aCwgcmVjdXJzaXZlLCBjb21wbGV0ZWQsIHByb2dyZXNzKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0bG9jYWwgPSBzZWxmLmNsaWVudC50b0xvY2FsKHBhdGgpO1xuXG5cdFx0aWYgKHNlbGYuaXNDb25uZWN0ZWQoKSkge1xuXHRcdFx0c2VsZi5zZnRwLnN0YXQocGF0aCwgZnVuY3Rpb24gKGVyciwgc3RhdHMpIHtcblx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtlcnJdKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc3RhdHMuaXNGaWxlKCkpIHtcblx0XHRcdFx0XHQvLyBGaWxlXG5cdFx0XHRcdFx0RlMubWFrZVRyZWVTeW5jKFBhdGguZGlybmFtZShsb2NhbCkpO1xuXHRcdFx0XHRcdHNlbGYuc2Z0cC5mYXN0R2V0KHBhdGgsIGxvY2FsLCB7XG5cdFx0XHRcdFx0XHRzdGVwOiBmdW5jdGlvbiAocmVhZCwgY2h1bmssIHNpemUpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBwcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdFx0XHRwcm9ncmVzcy5hcHBseShudWxsLCBbcmVhZCAvIHNpemVdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbXBsZXRlZCA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtlcnJdKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvLyBEaXJlY3RvcnlcblxuXHRcdFx0XHRcdHNlbGYubGlzdChwYXRoLCByZWN1cnNpdmUsIGZ1bmN0aW9uIChlcnIsIGxpc3QpIHtcblx0XHRcdFx0XHRcdGxpc3QudW5zaGlmdCh7bmFtZTogcGF0aCwgdHlwZTogJ2QnfSk7XG5cdFx0XHRcdFx0XHRsaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsgaXRlbS5kZXB0aCA9IGl0ZW0ubmFtZS5yZXBsYWNlKC9eXFwvKy8sICcnKS5yZXBsYWNlKC9cXC8rJC8pLnNwbGl0KCcvJykubGVuZ3RoOyB9KTtcblx0XHRcdFx0XHRcdGxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0XHRcdFx0XHRpZiAoYS5kZXB0aCA9PSBiLmRlcHRoKVxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYS5kZXB0aCA+IGIuZGVwdGggPyAxIDogLTE7XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0dmFyIGVycm9yID0gbnVsbCxcblx0XHRcdFx0XHRcdFx0dG90YWwgPSBsaXN0Lmxlbmd0aCxcblx0XHRcdFx0XHRcdFx0aSA9IC0xO1xuXHRcdFx0XHRcdFx0dmFyIGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbZXJyb3IsIGxpc3RdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhciBuID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHQrK2k7XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdFx0XHRcdFx0cHJvZ3Jlc3MuYXBwbHkobnVsbCwgW2kgLyB0b3RhbF0pO1xuXG5cdFx0XHRcdFx0XHRcdHZhciBpdGVtID0gbGlzdC5zaGlmdCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbSA9PSBudWxsKVxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBlKCk7XG5cdFx0XHRcdFx0XHRcdHZhciBsb2NhbCA9IHNlbGYuY2xpZW50LnRvTG9jYWwoaXRlbS5uYW1lKTtcblx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0udHlwZSA9PSAnZCcgfHwgaXRlbS50eXBlID09ICdsJykge1xuXHRcdFx0XHRcdFx0XHRcdC8vbWtkaXJwKGxvY2FsLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0RlMubWFrZVRyZWUobG9jYWwsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChlcnIpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG4oKTtcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnNmdHAuZmFzdEdldChpdGVtLm5hbWUsIGxvY2FsLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGVwOiBmdW5jdGlvbiAocmVhZCwgY2h1bmssIHNpemUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBwcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9ncmVzcy5hcHBseShudWxsLCBbKGkgLyB0b3RhbCkgKyAocmVhZCAvIHNpemUgLyB0b3RhbCldKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZXJyKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBuKCk7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG4oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbJ05vdCBjb25uZWN0ZWQnXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAocGF0aCwgY29tcGxldGVkLCBwcm9ncmVzcykge1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdHJlbW90ZSA9IHNlbGYuY2xpZW50LnRvUmVtb3RlKHBhdGgpO1xuXG5cdFx0aWYgKHNlbGYuaXNDb25uZWN0ZWQoKSkge1xuXHRcdFx0Ly8gRmlsZVxuXHRcdFx0aWYgKEZTLmlzRmlsZVN5bmMocGF0aCkpIHtcblx0XHRcdFx0dmFyIGUgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdFx0XHRjb21wbGV0ZWQuYXBwbHkobnVsbCwgW2VyciA/IGVyciA6IG51bGwsIFt7bmFtZTogcGF0aCwgdHlwZTogJ2YnfV1dKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnNmdHAuZmFzdFB1dChwYXRoLCByZW1vdGUsIHtcblx0XHRcdFx0XHRzdGVwOiBmdW5jdGlvbiAod3JpdHRlbiwgY2h1bmssIHNpemUpIHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdFx0XHRcdHByb2dyZXNzLmFwcGx5KG51bGwsIFt3cml0dGVuIC8gc2l6ZV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0XHRcdGlmIChlcnIudHlwZSA9PSAnTk9fU1VDSF9GSUxFJykge1xuXHRcdFx0XHRcdFx0XHRzZWxmLm1rZGlyKFBhdGguZGlybmFtZShyZW1vdGUpLnJlcGxhY2UoL1xcXFwvZywgJy8nKSwgdHJ1ZSwgZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChlcnIpXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZShlcnIpO1xuXG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5zZnRwLmZhc3RQdXQocGF0aCwgcmVtb3RlLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGVwOiBmdW5jdGlvbiAod3JpdHRlbiwgY2h1bmssIHNpemUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBwcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9ncmVzcy5hcHBseShudWxsLCBbd3JpdHRlbiAvIHNpemVdKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZShlcnIpXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gZShlcnIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBlKCk7XG5cdFx0XHRcdH0pXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9sZGVyXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0c2VsZi5jbGllbnQuX3RyYXZlcnNlVHJlZShwYXRoLCBmdW5jdGlvbiAobGlzdCkge1xuXHRcdFx0XHRcdHNlbGYubWtkaXIocmVtb3RlLCB0cnVlLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHR2YXIgZXJyb3IsXG5cdFx0XHRcdFx0XHRcdGkgPSAtMSxcblx0XHRcdFx0XHRcdFx0dG90YWwgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdHZhciBlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbXBsZXRlZCA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZWQuYXBwbHkobnVsbCwgW2Vycm9yLCBsaXN0XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0aWYgKCsraSA+PSBsaXN0Lmxlbmd0aClcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZSgpO1xuXHRcdFx0XHRcdFx0XHR2YXIgaXRlbSA9IGxpc3RbaV0sXG5cdFx0XHRcdFx0XHRcdFx0cmVtb3RlID0gc2VsZi5jbGllbnQudG9SZW1vdGUoaXRlbS5uYW1lKTtcblx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0udHlwZSA9PSAnZCcgfHwgaXRlbS50eXBlID09ICdsJykge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuc2Z0cC5ta2RpcihyZW1vdGUsIHt9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZXJyKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBuKCk7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5zZnRwLmZhc3RQdXQoaXRlbS5uYW1lLCByZW1vdGUsIHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0ZXA6IGZ1bmN0aW9uICh3cml0dGVuLCBjaHVuaywgc2l6ZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIHByb2dyZXNzID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2dyZXNzLmFwcGx5KG51bGwsIFsoaSAvIHRvdGFsKSArICh3cml0dGVuIC8gc2l6ZSAvIHRvdGFsKV0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChlcnIpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG4oKTtcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIG4oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbJ05vdCBjb25uZWN0ZWQnXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5ta2RpciA9IGZ1bmN0aW9uIChwYXRoLCByZWN1cnNpdmUsIGNvbXBsZXRlZCkge1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdHJlbW90ZXMgPSBwYXRoLnJlcGxhY2UoL15cXC8rLywgJycpLnJlcGxhY2UoL1xcLyskLywgJycpLnNwbGl0KCcvJyksXG5cdFx0XHRkaXJzID0gWycvJyArIHJlbW90ZXMuc2xpY2UoMCwgcmVtb3Rlcy5sZW5ndGgpLmpvaW4oJy8nKV07XG5cblx0XHRpZiAoc2VsZi5pc0Nvbm5lY3RlZCgpKSB7XG5cdFx0XHRpZiAocmVjdXJzaXZlKSB7XG5cdFx0XHRcdGZvciAodmFyIGEgPSByZW1vdGVzLmxlbmd0aCAtIDE7IGEgPiAwOyAtLWEpXG5cdFx0XHRcdFx0ZGlycy51bnNoaWZ0KCcvJyArIHJlbW90ZXMuc2xpY2UoMCwgYSkuam9pbignLycpKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBkaXIgPSBkaXJzLnNoaWZ0KCksXG5cdFx0XHRcdFx0bGFzdCA9IGRpcnMubGVuZ3RoID09IDA7XG5cblx0XHRcdFx0c2VsZi5zZnRwLm1rZGlyKGRpciwge30sIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRpZiAobGFzdCkge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbZXJyID8gZXJyIDogbnVsbF0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRuKCk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbJ05vdCBjb25uZWN0ZWQnXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5ta2ZpbGUgPSBmdW5jdGlvbiAocGF0aCwgY29tcGxldGVkKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0bG9jYWwgPSBzZWxmLmNsaWVudC50b0xvY2FsKHBhdGgpLFxuXHRcdFx0ZW1wdHkgPSBuZXcgQnVmZmVyKCcnLCAndXRmOCcpO1xuXG5cdFx0aWYgKHNlbGYuaXNDb25uZWN0ZWQoKSkge1xuXHRcdFx0c2VsZi5zZnRwLm9wZW4ocGF0aCwgJ3cnLCB7fSwgZnVuY3Rpb24gKGVyciwgaGFuZGxlKSB7XG5cdFx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbXBsZXRlZCA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbZXJyXSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuc2Z0cC53cml0ZShoYW5kbGUsIGVtcHR5LCAwLCAwLCAwLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbZXJyXSk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vbWtkaXJwKFBhdGguZGlybmFtZShsb2NhbCksIGZ1bmN0aW9uIChlcnIxKSB7XG5cdFx0XHRcdFx0RlMubWFrZVRyZWUoUGF0aC5kaXJuYW1lKGxvY2FsKSwgZnVuY3Rpb24gKGVycjEpIHtcblx0XHRcdFx0XHRcdEZTLndyaXRlRmlsZShsb2NhbCwgZW1wdHksIGZ1bmN0aW9uIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbZXJyMSB8fCBlcnIyXSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSlcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRjb21wbGV0ZWQuYXBwbHkobnVsbCwgWydOb3QgY29ubmVjdGVkJ10pO1xuXHRcdH1cblxuXHRcdHJldHVybiBzZWxmO1xuXHR9XG5cblx0Q29ubmVjdG9yU0ZUUC5wcm90b3R5cGUucmVuYW1lID0gZnVuY3Rpb24gKHNvdXJjZSwgZGVzdCwgY29tcGxldGVkKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKHNlbGYuaXNDb25uZWN0ZWQoKSkge1xuXHRcdFx0c2VsZi5zZnRwLnJlbmFtZShzb3VyY2UsIGRlc3QsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtlcnJdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRGUy5yZW5hbWUoc2VsZi5jbGllbnQudG9Mb2NhbChzb3VyY2UpLCBzZWxmLmNsaWVudC50b0xvY2FsKGRlc3QpLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbXBsZXRlZCA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtlcnJdKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbJ05vdCBjb25uZWN0ZWQnXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH1cblxuXHRDb25uZWN0b3JTRlRQLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocGF0aCwgY29tcGxldGVkKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKHNlbGYuaXNDb25uZWN0ZWQoKSkge1xuXHRcdFx0c2VsZi5zZnRwLnN0YXQocGF0aCwgZnVuY3Rpb24gKGVyciwgc3RhdHMpIHtcblx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29tcGxldGVkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtlcnJdKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc3RhdHMuaXNGaWxlKCkpIHtcblx0XHRcdFx0XHQvLyBGaWxlXG5cdFx0XHRcdFx0c2VsZi5zZnRwLnVubGluayhwYXRoLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbXBsZXRlZCA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHRcdFx0Y29tcGxldGVkLmFwcGx5KG51bGwsIFtlcnIsIFt7bmFtZTogcGF0aCwgdHlwZTogJ2YnfV1dKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvLyBEaXJlY3Rvcnlcblx0XHRcdFx0XHRzZWxmLmxpc3QocGF0aCwgdHJ1ZSwgZnVuY3Rpb24gKGVyciwgbGlzdCkge1xuXHRcdFx0XHRcdFx0bGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7IGl0ZW0uZGVwdGggPSBpdGVtLm5hbWUucmVwbGFjZSgvXlxcLysvLCAnJykucmVwbGFjZSgvXFwvKyQvKS5zcGxpdCgnLycpLmxlbmd0aDsgfSk7XG5cdFx0XHRcdFx0XHRsaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGEuZGVwdGggPT0gYi5kZXB0aClcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGEuZGVwdGggPiBiLmRlcHRoID8gLTEgOiAxO1xuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdHZhciBkb25lID0gMDtcblxuXHRcdFx0XHRcdFx0dmFyIGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuc2Z0cC5ybWRpcihwYXRoLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZWQuYXBwbHkobnVsbCwgW2VyciwgbGlzdF0pO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRcdFx0XHQrK2RvbmU7XG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGl0ZW0udHlwZSA9PSAnZCcgfHwgaXRlbS50eXBlID09ICdsJyA/ICdybWRpcicgOiAndW5saW5rJztcblx0XHRcdFx0XHRcdFx0c2VsZi5zZnRwW2ZuXShpdGVtLm5hbWUsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoLS1kb25lID09IDApXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZSgpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0aWYgKGxpc3QubGVuZ3RoID09IDApXG5cdFx0XHRcdFx0XHRcdGUoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjb21wbGV0ZWQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdGNvbXBsZXRlZC5hcHBseShudWxsLCBbJ05vdCBjb25uZWN0ZWQnXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH1cblxuXHRyZXR1cm4gQ29ubmVjdG9yU0ZUUDtcbn0pKCk7XG4iXX0=