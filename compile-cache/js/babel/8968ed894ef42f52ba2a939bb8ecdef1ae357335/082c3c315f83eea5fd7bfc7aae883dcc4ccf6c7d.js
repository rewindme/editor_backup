var __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
	for (var key in parent) {
		if (__hasProp.call(parent, key)) child[key] = parent[key];
	}function ctor() {
		this.constructor = child;
	}ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    $ = require('atom').$,
    View = require('atom').View;

module.exports = FileView = (function (parent) {

	__extends(FileView, parent);

	function FileView(file) {
		FileView.__super__.constructor.apply(this, arguments);
	}

	FileView.content = function () {
		return this.li({
			'class': 'file entry list-item'
		}, (function () {
			return this.span({
				'class': 'name icon',
				'outlet': 'name'
			});
		}).bind(this));
	};

	FileView.prototype.initialize = function (file) {
		//FileView.__super__.initialize.apply(this, arguments);

		var self = this;

		self.item = file;
		self.name.text(self.item.name);
		self.name.attr('data-name', self.item.name);
		self.name.attr('data-path', self.item.remote);

		switch (self.item.type) {
			case 'binary':
				self.name.addClass('icon-file-binary');break;
			case 'compressed':
				self.name.addClass('icon-file-zip');break;
			case 'image':
				self.name.addClass('icon-file-media');break;
			case 'pdf':
				self.name.addClass('icon-file-pdf');break;
			case 'readme':
				self.name.addClass('icon-book');break;
			case 'text':
				self.name.addClass('icon-file-text');break;
		}

		// Events
		self.on('mousedown', function (e) {
			e.stopPropagation();

			var view = $(this).view(),
			    button = e.originalEvent ? e.originalEvent.button : 0;

			if (!view) return;

			switch (button) {
				case 2:
					if (view.is('.selected')) return;
				default:
					if (!e.ctrlKey) $('.remote-ftp-view .selected').removeClass('selected');
					view.toggleClass('selected');
			}
		});
		self.on('dblclick', function (e) {
			e.stopPropagation();

			var view = $(this).view();
			if (!view) return;

			view.open();
		});
	};

	FileView.prototype.destroy = function () {
		this.item = null;

		this.remove();
	};

	FileView.prototype.open = function () {
		this.item.open();
	};

	return FileView;
})(View);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi92aWV3cy9maWxlLXZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsQ0FBQSxHQUFFLENBQUMsY0FBYztJQUNoQyxTQUFTLEdBQUcsU0FBWixTQUFTLENBQVksS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUFFLE1BQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO0FBQUUsTUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQUUsQUFBQyxTQUFTLElBQUksR0FBRztBQUFFLE1BQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0VBQUUsQUFBQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsQUFBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxPQUFPLEtBQUssQ0FBQztDQUFFO0lBQy9SLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyQixJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRTs7QUFFOUMsVUFBUyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQzs7QUFFNUIsVUFBUyxRQUFRLENBQUUsSUFBSSxFQUFFO0FBQ3hCLFVBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDdEQ7O0FBRUQsU0FBUSxDQUFDLE9BQU8sR0FBRyxZ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QUFFLENBQUM7R0FDWixDQUFDLENBQUM7RUFDSCxDQUFBOztBQUVELFNBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDeEMsTUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRWpCLE1BQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztFQUNkLENBQUE7O0FBRUQsU0FBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUNyQyxNQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ2pCLENBQUE7O0FBRUQsUUFBTyxRQUFRLENBQUM7Q0FFaEIsQ0FBQSxDQUFFLElBQUksQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9yZW1vdGUtZnRwL2xpYi92aWV3cy9maWxlLXZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG5cdF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuXHQkID0gcmVxdWlyZSgnYXRvbScpLiQsXG5cdFZpZXcgPSByZXF1aXJlKCdhdG9tJykuVmlldztcblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlVmlldyA9IChmdW5jdGlvbiAocGFyZW50KSB7XG5cblx0X19leHRlbmRzKEZpbGVWaWV3LCBwYXJlbnQpO1xuXG5cdGZ1bmN0aW9uIEZpbGVWaWV3IChmaWxlKSB7XG5cdFx0RmlsZVZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdH1cblxuXHRGaWxlVmlldy5jb250ZW50ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLmxpKHtcblx0XHRcdCdjbGFzcyc6ICdmaWxlIGVudHJ5IGxpc3QtaXRlbSdcblx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zcGFuKHtcblx0XHRcdFx0J2NsYXNzJzogJ25hbWUgaWNvbicsXG5cdFx0XHRcdCdvdXRsZXQnOiAnbmFtZSdcblx0XHRcdH0pO1xuXHRcdH0uYmluZCh0aGlzKSk7XG5cdH07XG5cblx0RmlsZVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZmlsZSkge1xuXHRcdC8vRmlsZVZpZXcuX19zdXBlcl9fLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYuaXRlbSA9IGZpbGU7XG5cdFx0c2VsZi5uYW1lLnRleHQoc2VsZi5pdGVtLm5hbWUpO1xuXHRcdHNlbGYubmFtZS5hdHRyKCdkYXRhLW5hbWUnLCBzZWxmLml0ZW0ubmFtZSk7XG5cdFx0c2VsZi5uYW1lLmF0dHIoJ2RhdGEtcGF0aCcsIHNlbGYuaXRlbS5yZW1vdGUpO1xuXG5cdFx0c3dpdGNoIChzZWxmLml0ZW0udHlwZSkge1xuXHRcdFx0Y2FzZSAnYmluYXJ5JzpcdFx0c2VsZi5uYW1lLmFkZENsYXNzKCdpY29uLWZpbGUtYmluYXJ5Jyk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnY29tcHJlc3NlZCc6XHRzZWxmLm5hbWUuYWRkQ2xhc3MoJ2ljb24tZmlsZS16aXAnKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdpbWFnZSc6XHRcdHNlbGYubmFtZS5hZGRDbGFzcygnaWNvbi1maWxlLW1lZGlhJyk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAncGRmJzpcdFx0XHRzZWxmLm5hbWUuYWRkQ2xhc3MoJ2ljb24tZmlsZS1wZGYnKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdyZWFkbWUnOlx0XHRzZWxmLm5hbWUuYWRkQ2xhc3MoJ2ljb24tYm9vaycpOyBicmVhaztcblx0XHRcdGNhc2UgJ3RleHQnOlx0XHRzZWxmLm5hbWUuYWRkQ2xhc3MoJ2ljb24tZmlsZS10ZXh0Jyk7IGJyZWFrO1xuXHRcdH1cblxuXHRcdC8vIEV2ZW50c1xuXHRcdHNlbGYub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHR2YXIgdmlldyA9ICQodGhpcykudmlldygpLFxuXHRcdFx0XHRidXR0b24gPSBlLm9yaWdpbmFsRXZlbnQgPyBlLm9yaWdpbmFsRXZlbnQuYnV0dG9uIDogMDtcblxuXHRcdFx0aWYgKCF2aWV3KVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdHN3aXRjaCAoYnV0dG9uKSB7XG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAodmlldy5pcygnLnNlbGVjdGVkJykpXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYgKCFlLmN0cmxLZXkpXG5cdFx0XHRcdFx0XHQkKCcucmVtb3RlLWZ0cC12aWV3IC5zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuXHRcdFx0XHRcdHZpZXcudG9nZ2xlQ2xhc3MoJ3NlbGVjdGVkJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0c2VsZi5vbignZGJsY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHRcdFx0dmFyIHZpZXcgPSAkKHRoaXMpLnZpZXcoKTtcblx0XHRcdGlmICghdmlldylcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR2aWV3Lm9wZW4oKTtcblx0XHR9KTtcblx0fVxuXG5cdEZpbGVWaWV3LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuaXRlbSA9IG51bGw7XG5cblx0XHR0aGlzLnJlbW92ZSgpO1xuXHR9XG5cblx0RmlsZVZpZXcucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5pdGVtLm9wZW4oKTtcblx0fVxuXG5cdHJldHVybiBGaWxlVmlldztcblxufSkoVmlldyk7XG4iXX0=