function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _atomBuildSpecHelpers = require('atom-build-spec-helpers');

var _atomBuildSpecHelpers2 = _interopRequireDefault(_atomBuildSpecHelpers);

var _helpers = require('./helpers');

'use babel';

describe('Linter Integration', function () {
  var directory = null;
  var workspaceElement = null;
  var dummyPackage = null;
  var join = require('path').join;

  _temp2['default'].track();

  beforeEach(function () {
    directory = _fsExtra2['default'].realpathSync(_temp2['default'].mkdirSync({ prefix: 'atom-build-spec-' }));
    atom.project.setPaths([directory]);

    atom.config.set('build.buildOnSave', false);
    atom.config.set('build.panelVisibility', 'Toggle');
    atom.config.set('build.saveOnBuild', false);
    atom.config.set('build.scrollOnError', false);
    atom.config.set('build.notificationOnRefresh', true);
    atom.config.set('editor.fontSize', 14);

    jasmine.unspy(window, 'setTimeout');
    jasmine.unspy(window, 'clearTimeout');

    runs(function () {
      workspaceElement = atom.views.getView(atom.workspace);
      jasmine.attachToDOM(workspaceElement);
    });

    waitsForPromise(function () {
      return Promise.resolve().then(function () {
        return atom.packages.activatePackage('build');
      }).then(function () {
        return atom.packages.activatePackage(join(__dirname, 'fixture', 'atom-build-spec-linter'));
      }).then(function () {
        return dummyPackage = atom.packages.getActivePackage('atom-build-spec-linter').mainModule;
      });
    });
  });

  afterEach(function () {
    _fsExtra2['default'].removeSync(directory);
  });

  describe('when error matching and linter is activated', function () {
    it('should push those errors to the linter', function () {
      expect(dummyPackage.hasRegistered()).toEqual(true);
      _fsExtra2['default'].writeFileSync(join(directory, '.atom-build.json'), _fsExtra2['default'].readFileSync(join(__dirname, 'fixture', '.atom-build.error-match-multiple.json')));

      runs(function () {
        return atom.commands.dispatch(workspaceElement, 'build:trigger');
      });

      waitsFor(function () {
        return workspaceElement.querySelector('.build .title') && workspaceElement.querySelector('.build .title').classList.contains('error');
      });

      runs(function () {
        var linter = dummyPackage.getLinter();
        expect(linter.messages).toEqual([{
          filePath: join(directory, '.atom-build.json'),
          range: [[2, 7], [2, 7]],
          text: 'Error from build',
          type: 'Error',
          severity: 'error',
          trace: undefined
        }, {
          filePath: join(directory, '.atom-build.json'),
          range: [[1, 4], [1, 4]],
          text: 'Error from build',
          type: 'Error',
          severity: 'error',
          trace: undefined
        }]);
      });
    });

    it('should parse `message` and include that to linter', function () {
      expect(dummyPackage.hasRegistered()).toEqual(true);
      _fsExtra2['default'].writeFileSync(join(directory, '.atom-build.json'), _fsExtra2['default'].readFileSync(join(__dirname, 'fixture', '.atom-build.error-match.message.json')));

      runs(function () {
        return atom.commands.dispatch(workspaceElement, 'build:trigger');
      });

      waitsFor(function () {
        return workspaceElement.querySelector('.build .title') && workspaceElement.querySelector('.build .title').classList.contains('error');
      });

      runs(function () {
        var linter = dummyPackage.getLinter();
        expect(linter.messages).toEqual([{
          filePath: join(directory, '.atom-build.json'),
          range: [[2, 7], [2, 7]],
          text: 'very bad things',
          type: 'Error',
          severity: 'error',
          trace: undefined
        }]);
      });
    });

    it('should emit warnings just like errors', function () {
      expect(dummyPackage.hasRegistered()).toEqual(true);
      _fsExtra2['default'].writeFileSync(join(directory, '.atom-build.js'), _fsExtra2['default'].readFileSync(join(__dirname, 'fixture', '.atom-build.match-function-warning.js')));

      runs(function () {
        return atom.commands.dispatch(workspaceElement, 'build:trigger');
      });

      waitsFor(function () {
        return workspaceElement.querySelector('.build .title') && workspaceElement.querySelector('.build .title').classList.contains('success');
      });

      runs(function () {
        var linter = dummyPackage.getLinter();
        expect(linter.messages).toEqual([{
          filePath: join(directory, '.atom-build.js'),
          range: [[4, 0], [4, 0]],
          text: 'mildly bad things',
          type: 'Warning',
          severity: 'warning',
          trace: undefined
        }]);
      });
    });

    it('should attach traces to matches where applicable', function () {
      expect(dummyPackage.hasRegistered()).toEqual(true);
      _fsExtra2['default'].writeFileSync(join(directory, '.atom-build.js'), _fsExtra2['default'].readFileSync(join(__dirname, 'fixture', '.atom-build.match-function-trace.js')));

      runs(function () {
        return atom.commands.dispatch(workspaceElement, 'build:trigger');
      });

      waitsFor(function () {
        return workspaceElement.querySelector('.build .title') && workspaceElement.querySelector('.build .title').classList.contains('error');
      });

      runs(function () {
        var linter = dummyPackage.getLinter();
        expect(linter.messages).toEqual([{
          filePath: join(directory, '.atom-build.js'),
          range: [[5, 0], [5, 0]],
          text: 'Error from build',
          type: 'Error',
          severity: 'error',
          trace: [{
            text: 'insert great explanation here',
            severity: 'info',
            type: 'Explanation',
            range: [[0, 0], [0, 0]],
            filePath: undefined
          }]
        }]);
      });
    });

    it('should clear linter errors when starting a new build', function () {
      expect(dummyPackage.hasRegistered()).toEqual(true);
      _fsExtra2['default'].writeFileSync(join(directory, '.atom-build.json'), _fsExtra2['default'].readFileSync(join(__dirname, 'fixture', '.atom-build.error-match.message.json')));

      runs(function () {
        return atom.commands.dispatch(workspaceElement, 'build:trigger');
      });

      waitsFor(function () {
        return workspaceElement.querySelector('.build .title') && workspaceElement.querySelector('.build .title').classList.contains('error');
      });

      runs(function () {
        var linter = dummyPackage.getLinter();
        expect(linter.messages).toEqual([{
          filePath: join(directory, '.atom-build.json'),
          range: [[2, 7], [2, 7]],
          text: 'very bad things',
          type: 'Error',
          severity: 'error',
          trace: undefined
        }]);
        _fsExtra2['default'].writeFileSync(join(directory, '.atom-build.json'), JSON.stringify({
          cmd: '' + (0, _helpers.sleep)(30)
        }));
      });

      waitsForPromise(function () {
        return _atomBuildSpecHelpers2['default'].refreshAwaitTargets();
      });

      runs(function () {
        return atom.commands.dispatch(workspaceElement, 'build:trigger');
      });

      waitsFor(function () {
        return workspaceElement.querySelector('.build .title') && !workspaceElement.querySelector('.build .title').classList.contains('error') && !workspaceElement.querySelector('.build .title').classList.contains('success');
      });

      runs(function () {
        expect(dummyPackage.getLinter().messages.length).toEqual(0);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/naver/.atom/packages/build/spec/linter-intergration-spec.js
