function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _atomBuildSpecHelpers = require('atom-build-spec-helpers');

var _atomBuildSpecHelpers2 = _interopRequireDefault(_atomBuildSpecHelpers);

var _libGulp = require('../lib/gulp');

'use babel';

describe('gulp provider', function () {
  var directory = undefined;
  var builder = undefined;
  var Builder = (0, _libGulp.provideBuilder)();

  var setupGulp = function setupGulp(preset) {
    var binGulp = _path2['default'].join(directory, 'node_modules', '.bin', 'gulp');
    var realGulp = _path2['default'].join(directory, 'node_modules', 'gulp', 'bin', 'gulp.js');
    var source = _path2['default'].join(__dirname, 'fixture', 'node_modules_' + preset);
    var target = _path2['default'].join(directory, 'node_modules');
    return _atomBuildSpecHelpers2['default'].vouch(_fsExtra2['default'].copy, source, target).then(function () {
      return Promise.all([_atomBuildSpecHelpers2['default'].vouch(_fsExtra2['default'].unlink, binGulp), _atomBuildSpecHelpers2['default'].vouch(_fsExtra2['default'].chmod, realGulp, parseInt('0700', 8))]);
    }).then(function () {
      return _atomBuildSpecHelpers2['default'].vouch(_fsExtra2['default'].symlink, realGulp, binGulp);
    });
  };

  beforeEach(function () {
    waitsForPromise(function () {
      return _atomBuildSpecHelpers2['default'].vouch(_temp2['default'].mkdir, 'atom-build-spec-').then(function (dir) {
        return _atomBuildSpecHelpers2['default'].vouch(_fsExtra2['default'].realpath, dir);
      }).then(function (dir) {
        directory = dir + '/';
        builder = new Builder(directory);
        atom.project.setPaths([directory]);
      });
    });
  });

  afterEach(function () {
    _fsExtra2['default'].removeSync(directory);
  });

  describe('when no gulpfile (any extension) exists', function () {
    it('should not be eligible', function () {
      expect(builder.isEligible()).toEqual(false);
    });
  });

  describe('when gulpfile.js exists with locally installed gulp', function () {
    beforeEach(function () {
      waitsForPromise(setupGulp.bind(null, 'gulp'));
      runs(function () {
        return _fsExtra2['default'].writeFileSync(directory + 'gulpfile.js', _fsExtra2['default'].readFileSync(__dirname + '/fixture/gulpfile.js'));
      });
    });

    it('should be eligible', function () {
      expect(builder.isEligible()).toEqual(true);
    });

    it('should use gulp to list targets', function () {
      expect(builder.isEligible()).toBe(true);
      waitsForPromise(function () {
        return builder.settings().then(function (settings) {
          var expected = ['Gulp: default', 'Gulp: dev build', 'Gulp: watch'].sort();
          var real = settings.map(function (s) {
            return s.name;
          }).sort();
          expect(expected).toEqual(real);
        });
      });
    });

    it('should export correct settings', function () {
      waitsForPromise(function () {
        expect(builder.isEligible()).toBe(true);
        return builder.settings().then(function (settings) {
          expect(settings.length).toBe(3);
          var target = settings.find(function (s) {
            return s.name === 'Gulp: watch';
          });
          expect(target.sh).toBe(false);
          expect(target.args).toEqual(['watch']);
          expect(target.exec).toBe(directory + 'node_modules/.bin/gulp');
        });
      });
    });

    it('should refresh targets when gulpfile.js is altered', function () {
      waitsForPromise(function () {
        expect(builder.isEligible()).toBe(true);
        return builder.settings().then(function (settings) {
          expect(settings.length).toBe(3);
        });
      });

      runs(function () {
        return _fsExtra2['default'].appendFileSync(directory + '/gulpfile.js', '\ngulp.task("new task", [ "default" ]);\n');
      });

      waitsForPromise(function () {
        expect(builder.isEligible()).toBe(true);
        return builder.settings().then(function (settings) {
          expect(settings.length).toBe(4);
          var target = settings.find(function (s) {
            return s.name === 'Gulp: new task';
          });
          expect(target.args).toEqual(['new task']);
        });
      });
    });
  });

  describe('when gulpfile.js exists but no local gulp is installed', function () {
    beforeEach(function () {
      _fsExtra2['default'].writeFileSync(directory + 'gulpfile.js', _fsExtra2['default'].readFileSync(__dirname + '/fixture/gulpfile.js'));
    });

    it('should be eligible', function () {
      expect(builder.isEligible()).toEqual(true);
    });

    it('should list the default target', function () {
      waitsForPromise(function () {
        expect(builder.isEligible()).toEqual(true);
        return builder.settings().then(function (settings) {
          var expected = ['Gulp: default'];
          var real = settings.map(function (s) {
            return s.name;
          });
          expect(expected).toEqual(real);
        });
      });
    });

    it('should export correct settings', function () {
      waitsForPromise(function () {
        expect(builder.isEligible()).toEqual(true);
        return builder.settings().then(function (settings) {
          expect(settings.length).toBe(1);
          var target = settings.find(function (s) {
            return s.name === 'Gulp: default';
          });
          expect(target.sh).toBe(false);
          expect(target.args).toEqual(['default']);
          expect(target.exec).toBe('gulp');
        });
      });
    });
  });

  describe('when gulpfile.babel.js exists with locally installed gulp', function () {
    beforeEach(function () {
      waitsForPromise(setupGulp.bind(null, 'babel'));
      runs(function () {
        return _fsExtra2['default'].writeFileSync(directory + 'gulpfile.babel.js', _fsExtra2['default'].readFileSync(__dirname + '/fixture/gulpfile.babel.js'));
      });
      runs(function () {
        return _fsExtra2['default'].writeFileSync(directory + '.babelrc', _fsExtra2['default'].readFileSync(__dirname + '/fixture/.babelrc'));
      });
    });

    it('should export correct settings', function () {
      expect(builder.isEligible()).toEqual(true);
      waitsForPromise(function () {
        return builder.settings().then(function (settings) {
          expect(settings.length).toBe(2);
          expect(settings.map(function (s) {
            return s.name;
          }).sort()).toEqual(['Gulp: babel-task-1', 'Gulp: babel-task-2'].sort());
          var target = settings.find(function (s) {
            return s.name === 'Gulp: babel-task-1';
          });
          expect(target.sh).toBe(false);
          expect(target.args).toEqual(['babel-task-1']);
          expect(target.exec).toBe(directory + 'node_modules/.bin/gulp');
        });
      });
    });
  });

  describe('when gulpfile.coffee exists with locally installed gulp', function () {
    beforeEach(function () {
      waitsForPromise(setupGulp.bind(null, 'coffee'));
      runs(function () {
        return _fsExtra2['default'].writeFileSync(directory + 'gulpfile.coffee', _fsExtra2['default'].readFileSync(__dirname + '/fixture/gulpfile.coffee'));
      });
    });

    it('should export correct settings', function () {
      expect(builder.isEligible()).toEqual(true);
      waitsForPromise(function () {
        return builder.settings().then(function (settings) {
          expect(settings.length).toBe(2);
          expect(settings.map(function (s) {
            return s.name;
          }).sort()).toEqual(['Gulp: coffee-task-1', 'Gulp: coffee-task-2'].sort());
          var target = settings.find(function (s) {
            return s.name === 'Gulp: coffee-task-1';
          });
          expect(target.sh).toBe(false);
          expect(target.args).toEqual(['coffee-task-1']);
          expect(target.exec).toBe(directory + 'node_modules/.bin/gulp');
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/naver/.atom/packages/build-gulp/spec/build-gulp-spec.js
