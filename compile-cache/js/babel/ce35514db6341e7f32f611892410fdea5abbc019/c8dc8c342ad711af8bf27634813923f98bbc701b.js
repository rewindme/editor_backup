

"use strict";

var _interopRequireWildcard = require("babel-runtime/helpers/interop-require-wildcard")["default"];

exports.__esModule = true;
exports.ImportSpecifier = ImportSpecifier;
exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
exports.ExportSpecifier = ExportSpecifier;
exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
exports.ExportAllDeclaration = ExportAllDeclaration;
exports.ExportNamedDeclaration = ExportNamedDeclaration;
exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
exports.ImportDeclaration = ImportDeclaration;
exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

function ImportSpecifier(node /*: Object*/) {
  this.print(node.imported, node);
  if (node.local && node.local.name !== node.imported.name) {
    this.push(" as ");
    this.print(node.local, node);
  }
}

function ImportDefaultSpecifier(node /*: Object*/) {
  this.print(node.local, node);
}

function ExportDefaultSpecifier(node /*: Object*/) {
  this.print(node.exported, node);
}

function ExportSpecifier(node /*: Object*/) {
  this.print(node.local, node);
  if (node.exported && node.local.name !== node.exported.name) {
    this.push(" as ");
    this.print(node.exported, node);
  }
}

function ExportNamespaceSpecifier(node /*: Object*/) {
  this.push("* as ");
  this.print(node.exported, node);
}

function ExportAllDeclaration(node /*: Object*/) {
  this.push("export *");
  if (node.exported) {
    this.push(" as ");
    this.print(node.exported, node);
  }
  this.push(" from ");
  this.print(node.source, node);
  this.semicolon();
}

function ExportNamedDeclaration() {
  this.push("export ");
  ExportDeclaration.apply(this, arguments);
}

function ExportDefaultDeclaration() {
  this.push("export default ");
  ExportDeclaration.apply(this, arguments);
}

function ExportDeclaration(node /*: Object*/) {
  if (node.declaration) {
    var declar = node.declaration;
    this.print(declar, node);
    if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar)) return;
  } else {
    if (node.exportKind === "type") {
      this.push("type ");
    }

    var specifiers = node.specifiers.slice(0);

    // print "special" specifiers first
    var hasSpecial = false;
    while (true) {
      var first = specifiers[0];
      if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
        hasSpecial = true;
        this.print(specifiers.shift(), node);
        if (specifiers.length) {
          this.push(", ");
        }
      } else {
        break;
      }
    }

    if (specifiers.length || !specifiers.length && !hasSpecial) {
      this.push("{");
      if (specifiers.length) {
        this.space();
        this.printJoin(specifiers, node, { separator: ", " });
        this.space();
      }
      this.push("}");
    }

    if (node.source) {
      this.push(" from ");
      this.print(node.source, node);
    }
  }

  this.ensureSemicolon();
}

function ImportDeclaration(node /*: Object*/) {
  this.push("import ");

  if (node.importKind === "type" || node.importKind === "typeof") {
    this.push(node.importKind + " ");
  }

  var specifiers = node.specifiers.slice(0);
  if (specifiers && specifiers.length) {
    // print "special" specifiers first
    while (true) {
      var first = specifiers[0];
      if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
        this.print(specifiers.shift(), node);
        if (specifiers.length) {
          this.push(", ");
        }
      } else {
        break;
      }
    }

    if (specifiers.length) {
      this.push("{");
      this.space();
      this.printJoin(specifiers, node, { separator: ", " });
      this.space();
      this.push("}");
    }

    this.push(" from ");
  }

  this.print(node.source, node);
  this.semicolon();
}

function ImportNamespaceSpecifier(node /*: Object*/) {
  this.push("* as ");
  this.print(node.local, node);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9idWlsZC1ndWxwL3NwZWMvZml4dHVyZS9ub2RlX21vZHVsZXNfYmFiZWwvYmFiZWwtZ2VuZXJhdG9yL2xpYi9nZW5lcmF0b3JzL21vZHVsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxZQUFZLENBQUM7O0FBRWIsSUFBSSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFbkcsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDMUIsT0FBTyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDMUMsT0FBTyxDQUFDLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUMxQyxPQUFPLENBQUMsd0JBQXdCLEdBQUcsd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLENBQUMsd0JBQXdCLEdBQUcsd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sQ0FBQyx3QkFBd0IsR0FBRyx3QkFBd0IsQ0FBQzs7QUFFNUQsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDOztBQUV6QyxJQUFJLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFN0MsU0FBUyxlQUFlLENBQUMsSUFBSSxlQUFlO0FBQzFDLE1BQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoQyxNQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxD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QUM7QUFDYixVQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2hCOztBQUVELFFBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDckI7O0FBRUQsTUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlCLE1BQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztDQUNsQjs7QUFFRCxTQUFTLHdCQUF3QixDQUFDLElBQUksZUFBZTtBQUNuRCxNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25CLE1BQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztDQUM5QiIsImZpbGUiOiIvVXNlcnMvbmF2ZXIvLmF0b20vcGFja2FnZXMvYnVpbGQtZ3VscC9zcGVjL2ZpeHR1cmUvbm9kZV9tb2R1bGVzX2JhYmVsL2JhYmVsLWdlbmVyYXRvci9saWIvZ2VuZXJhdG9ycy9tb2R1bGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLXdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuSW1wb3J0U3BlY2lmaWVyID0gSW1wb3J0U3BlY2lmaWVyO1xuZXhwb3J0cy5JbXBvcnREZWZhdWx0U3BlY2lmaWVyID0gSW1wb3J0RGVmYXVsdFNwZWNpZmllcjtcbmV4cG9ydHMuRXhwb3J0RGVmYXVsdFNwZWNpZmllciA9IEV4cG9ydERlZmF1bHRTcGVjaWZpZXI7XG5leHBvcnRzLkV4cG9ydFNwZWNpZmllciA9IEV4cG9ydFNwZWNpZmllcjtcbmV4cG9ydHMuRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyID0gRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyO1xuZXhwb3J0cy5FeHBvcnRBbGxEZWNsYXJhdGlvbiA9IEV4cG9ydEFsbERlY2xhcmF0aW9uO1xuZXhwb3J0cy5FeHBvcnROYW1lZERlY2xhcmF0aW9uID0gRXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcbmV4cG9ydHMuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uID0gRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uO1xuZXhwb3J0cy5JbXBvcnREZWNsYXJhdGlvbiA9IEltcG9ydERlY2xhcmF0aW9uO1xuZXhwb3J0cy5JbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgPSBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI7XG5cbnZhciBfYmFiZWxUeXBlcyA9IHJlcXVpcmUoXCJiYWJlbC10eXBlc1wiKTtcblxudmFyIHQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYmFiZWxUeXBlcyk7XG5cbmZ1bmN0aW9uIEltcG9ydFNwZWNpZmllcihub2RlIC8qOiBPYmplY3QqLykge1xuICB0aGlzLnByaW50KG5vZGUuaW1wb3J0ZWQsIG5vZGUpO1xuICBpZiAobm9kZS5sb2NhbCAmJiBub2RlLmxvY2FsLm5hbWUgIT09IG5vZGUuaW1wb3J0ZWQubmFtZSkge1xuICAgIHRoaXMucHVzaChcIiBhcyBcIik7XG4gICAgdGhpcy5wcmludChub2RlLmxvY2FsLCBub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBJbXBvcnREZWZhdWx0U3BlY2lmaWVyKG5vZGUgLyo6IE9iamVjdCovKSB7XG4gIHRoaXMucHJpbnQobm9kZS5sb2NhbCwgbm9kZSk7XG59XG5cbmZ1bmN0aW9uIEV4cG9ydERlZmF1bHRTcGVjaWZpZXIobm9kZSAvKjogT2JqZWN0Ki8pIHtcbiAgdGhpcy5wcmludChub2RlLmV4cG9ydGVkLCBub2RlKTtcbn1cblxuZnVuY3Rpb24gRXhwb3J0U3BlY2lmaWVyKG5vZGUgLyo6IE9iamVjdCovKSB7XG4gIHRoaXMucHJpbnQobm9kZS5sb2NhbCwgbm9kZSk7XG4gIGlmIChub2RlLmV4cG9ydGVkICYmIG5vZGUubG9jYWwubmFtZSAhPT0gbm9kZS5leHBvcnRlZC5uYW1lKSB7XG4gICAgdGhpcy5wdXNoKFwiIGFzIFwiKTtcbiAgICB0aGlzLnByaW50KG5vZGUuZXhwb3J0ZWQsIG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIEV4cG9ydE5hbWVzcGFjZVNwZWNpZmllcihub2RlIC8qOiBPYmplY3QqLykge1xuICB0aGlzLnB1c2goXCIqIGFzIFwiKTtcbiAgdGhpcy5wcmludChub2RlLmV4cG9ydGVkLCBub2RlKTtcbn1cblxuZnVuY3Rpb24gRXhwb3J0QWxsRGVjbGFyYXRpb24obm9kZSAvKjogT2JqZWN0Ki8pIHtcbiAgdGhpcy5wdXNoKFwiZXhwb3J0ICpcIik7XG4gIGlmIChub2RlLmV4cG9ydGVkKSB7XG4gICAgdGhpcy5wdXNoKFwiIGFzIFwiKTtcbiAgICB0aGlzLnByaW50KG5vZGUuZXhwb3J0ZWQsIG5vZGUpO1xuICB9XG4gIHRoaXMucHVzaChcIiBmcm9tIFwiKTtcbiAgdGhpcy5wcmludChub2RlLnNvdXJjZSwgbm9kZSk7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG59XG5cbmZ1bmN0aW9uIEV4cG9ydE5hbWVkRGVjbGFyYXRpb24oKSB7XG4gIHRoaXMucHVzaChcImV4cG9ydCBcIik7XG4gIEV4cG9ydERlY2xhcmF0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIEV4cG9ydERlZmF1bHREZWNsYXJhdGlvbigpIHtcbiAgdGhpcy5wdXNoKFwiZXhwb3J0IGRlZmF1bHQgXCIpO1xuICBFeHBvcnREZWNsYXJhdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBFeHBvcnREZWNsYXJhdGlvbihub2RlIC8qOiBPYmplY3QqLykge1xuICBpZiAobm9kZS5kZWNsYXJhdGlvbikge1xuICAgIHZhciBkZWNsYXIgPSBub2RlLmRlY2xhcmF0aW9uO1xuICAgIHRoaXMucHJpbnQoZGVjbGFyLCBub2RlKTtcbiAgICBpZiAodC5pc1N0YXRlbWVudChkZWNsYXIpIHx8IHQuaXNGdW5jdGlvbihkZWNsYXIpIHx8IHQuaXNDbGFzcyhkZWNsYXIpKSByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgaWYgKG5vZGUuZXhwb3J0S2luZCA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgIHRoaXMucHVzaChcInR5cGUgXCIpO1xuICAgIH1cblxuICAgIHZhciBzcGVjaWZpZXJzID0gbm9kZS5zcGVjaWZpZXJzLnNsaWNlKDApO1xuXG4gICAgLy8gcHJpbnQgXCJzcGVjaWFsXCIgc3BlY2lmaWVycyBmaXJzdFxuICAgIHZhciBoYXNTcGVjaWFsID0gZmFsc2U7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHZhciBmaXJzdCA9IHNwZWNpZmllcnNbMF07XG4gICAgICBpZiAodC5pc0V4cG9ydERlZmF1bHRTcGVjaWZpZXIoZmlyc3QpIHx8IHQuaXNFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXIoZmlyc3QpKSB7XG4gICAgICAgIGhhc1NwZWNpYWwgPSB0cnVlO1xuICAgICAgICB0aGlzLnByaW50KHNwZWNpZmllcnMuc2hpZnQoKSwgbm9kZSk7XG4gICAgICAgIGlmIChzcGVjaWZpZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMucHVzaChcIiwgXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3BlY2lmaWVycy5sZW5ndGggfHwgIXNwZWNpZmllcnMubGVuZ3RoICYmICFoYXNTcGVjaWFsKSB7XG4gICAgICB0aGlzLnB1c2goXCJ7XCIpO1xuICAgICAgaWYgKHNwZWNpZmllcnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuc3BhY2UoKTtcbiAgICAgICAgdGhpcy5wcmludEpvaW4oc3BlY2lmaWVycywgbm9kZSwgeyBzZXBhcmF0b3I6IFwiLCBcIiB9KTtcbiAgICAgICAgdGhpcy5zcGFjZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5wdXNoKFwifVwiKTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5zb3VyY2UpIHtcbiAgICAgIHRoaXMucHVzaChcIiBmcm9tIFwiKTtcbiAgICAgIHRoaXMucHJpbnQobm9kZS5zb3VyY2UsIG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuZW5zdXJlU2VtaWNvbG9uKCk7XG59XG5cbmZ1bmN0aW9uIEltcG9ydERlY2xhcmF0aW9uKG5vZGUgLyo6IE9iamVjdCovKSB7XG4gIHRoaXMucHVzaChcImltcG9ydCBcIik7XG5cbiAgaWYgKG5vZGUuaW1wb3J0S2luZCA9PT0gXCJ0eXBlXCIgfHwgbm9kZS5pbXBvcnRLaW5kID09PSBcInR5cGVvZlwiKSB7XG4gICAgdGhpcy5wdXNoKG5vZGUuaW1wb3J0S2luZCArIFwiIFwiKTtcbiAgfVxuXG4gIHZhciBzcGVjaWZpZXJzID0gbm9kZS5zcGVjaWZpZXJzLnNsaWNlKDApO1xuICBpZiAoc3BlY2lmaWVycyAmJiBzcGVjaWZpZXJzLmxlbmd0aCkge1xuICAgIC8vIHByaW50IFwic3BlY2lhbFwiIHNwZWNpZmllcnMgZmlyc3RcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgdmFyIGZpcnN0ID0gc3BlY2lmaWVyc1swXTtcbiAgICAgIGlmICh0LmlzSW1wb3J0RGVmYXVsdFNwZWNpZmllcihmaXJzdCkgfHwgdC5pc0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllcihmaXJzdCkpIHtcbiAgICAgICAgdGhpcy5wcmludChzcGVjaWZpZXJzLnNoaWZ0KCksIG5vZGUpO1xuICAgICAgICBpZiAoc3BlY2lmaWVycy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnB1c2goXCIsIFwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNwZWNpZmllcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnB1c2goXCJ7XCIpO1xuICAgICAgdGhpcy5zcGFjZSgpO1xuICAgICAgdGhpcy5wcmludEpvaW4oc3BlY2lmaWVycywgbm9kZSwgeyBzZXBhcmF0b3I6IFwiLCBcIiB9KTtcbiAgICAgIHRoaXMuc3BhY2UoKTtcbiAgICAgIHRoaXMucHVzaChcIn1cIik7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKFwiIGZyb20gXCIpO1xuICB9XG5cbiAgdGhpcy5wcmludChub2RlLnNvdXJjZSwgbm9kZSk7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG59XG5cbmZ1bmN0aW9uIEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcihub2RlIC8qOiBPYmplY3QqLykge1xuICB0aGlzLnB1c2goXCIqIGFzIFwiKTtcbiAgdGhpcy5wcmludChub2RlLmxvY2FsLCBub2RlKTtcbn0iXX0=
//# sourceURL=/Users/naver/.atom/packages/build-gulp/spec/fixture/node_modules_babel/babel-generator/lib/generators/modules.js
