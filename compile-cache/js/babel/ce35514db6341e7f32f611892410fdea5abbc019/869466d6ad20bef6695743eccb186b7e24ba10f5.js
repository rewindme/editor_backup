

"use strict";

var _interopRequireWildcard = require("babel-runtime/helpers/interop-require-wildcard")["default"];

exports.__esModule = true;
exports.isCompatTag = isCompatTag;
exports.buildChildren = buildChildren;

var _index = require("./index");

var t = _interopRequireWildcard(_index);

var isReactComponent = t.buildMatchMemberExpression("React.Component");

exports.isReactComponent = isReactComponent;

function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/{
  return !!tagName && /^[a-z]|\-/.test(tagName);
}

function cleanJSXElementLiteralChild(child, /*: { value: string }*/args /*: Array<Object>*/) {
  var lines = child.value.split(/\r\n|\n|\r/);

  var lastNonEmptyLine = 0;

  for (var i = 0; i < lines.length; i++) {
    if (lines[i].match(/[^ \t]/)) {
      lastNonEmptyLine = i;
    }
  }

  var str = "";

  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];

    var isFirstLine = i === 0;
    var isLastLine = i === lines.length - 1;
    var isLastNonEmptyLine = i === lastNonEmptyLine;

    // replace rendered whitespace tabs with spaces
    var trimmedLine = line.replace(/\t/g, " ");

    // trim whitespace touching a newline
    if (!isFirstLine) {
      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
    }

    // trim whitespace touching an endline
    if (!isLastLine) {
      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
    }

    if (trimmedLine) {
      if (!isLastNonEmptyLine) {
        trimmedLine += " ";
      }

      str += trimmedLine;
    }
  }

  if (str) args.push(t.stringLiteral(str));
}

function buildChildren(node /*: Object*/) /*: Array<Object>*/{
  var elems = [];

  for (var i = 0; i < node.children.length; i++) {
    var child = node.children[i];

    if (t.isJSXText(child)) {
      cleanJSXElementLiteralChild(child, elems);
      continue;
    }

    if (t.isJSXExpressionContainer(child)) child = child.expression;
    if (t.isJSXEmptyExpression(child)) continue;

    elems.push(child);
  }

  return elems;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9idWlsZC1ndWxwL3NwZWMvZml4dHVyZS9ub2RlX21vZHVsZXNfYmFiZWwvYmFiZWwtdHlwZXMvbGliL3JlYWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsWUFBWSxDQUFDOztBQUViLElBQUksdUJBQXVCLEdBQUcsT0FBTyxDQUFDLGdEQUFnRCxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRW5HLE9BQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQzFCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDOztBQUV0QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRWhDLElBQUksQ0FBQyxHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUV4QyxJQUFJLGdCQUFnQixHQUFHLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUV2RSxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7O0FBRTVDLFNBQVMsV0FBVyxDQUFDLE9BQU8sZ0NBQWlDO0FBQzNELFNBQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQy9DOztBQUVELFNBQVMsMkJBQTJCLENBQUMsS0FBSyx5QkFBMEIsSUFBSSxzQkFBc0I7QUFDNUYsTUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRTVDLE1BQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDOztBQUV6QixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNyQyxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDNUIsc0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCO0dBQ0Y7O0FBRUQsTUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDOztBQUViLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3JDLFFBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFcEIsUUFBSSxXQUFXLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixRQUFJLFVBQVUsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDeEMsUUFBSSxrQkFBa0IsR0FBRyxDQUFDLEtBQUssZ0JBQWdCLENBQUM7OztBQUdoRCxRQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQzs7O0FBRzNDLFFBQUksQ0FBQyxXQUFXLEVBQUU7QUFDaEIsaUJBQVcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNoRDs7O0FBR0QsUUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNmLGlCQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDaEQ7O0FBRUQsUUFBSSxXQUFXLEVBQUU7QUFDZixVQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDdkIsbUJBQVcsSUFBSSxHQUFHLENBQUM7T0FDcEI7O0FBRUQsU0FBRyxJQUFJLFdBQVcsQ0FBQztLQUNwQjtHQUNGOztBQUVELE1BQUksR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQzFDOztBQUVELFNBQVMsYUFBYSxDQUFDLElBQUksa0NBQW1DO0FBQzVELE1BQUksS0FBSyxHQUFHLEVBQUUsQ0FBQzs7QUFFZixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsUUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFN0IsUUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3RCLGlDQUEyQixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMxQyxlQUFTO0tBQ1Y7O0FBRUQsUUFBSSxDQUFDLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDaEUsUUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUzs7QUFFNUMsU0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNuQjs7QUFFRCxTQUFPLEtBQUssQ0FBQztDQUNkIiwiZmlsZSI6Ii9Vc2Vycy9uYXZlci8uYXRvbS9wYWNrYWdlcy9idWlsZC1ndWxwL3NwZWMvZml4dHVyZS9ub2RlX21vZHVsZXNfYmFiZWwvYmFiZWwtdHlwZXMvbGliL3JlYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLXdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuaXNDb21wYXRUYWcgPSBpc0NvbXBhdFRhZztcbmV4cG9ydHMuYnVpbGRDaGlsZHJlbiA9IGJ1aWxkQ2hpbGRyZW47XG5cbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi9pbmRleFwiKTtcblxudmFyIHQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaW5kZXgpO1xuXG52YXIgaXNSZWFjdENvbXBvbmVudCA9IHQuYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb24oXCJSZWFjdC5Db21wb25lbnRcIik7XG5cbmV4cG9ydHMuaXNSZWFjdENvbXBvbmVudCA9IGlzUmVhY3RDb21wb25lbnQ7XG5cbmZ1bmN0aW9uIGlzQ29tcGF0VGFnKHRhZ05hbWUgLyo6OiA/OiBzdHJpbmcqLykgLyo6IGJvb2xlYW4qLyB7XG4gIHJldHVybiAhIXRhZ05hbWUgJiYgL15bYS16XXxcXC0vLnRlc3QodGFnTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFuSlNYRWxlbWVudExpdGVyYWxDaGlsZChjaGlsZCAvKjogeyB2YWx1ZTogc3RyaW5nIH0qLywgYXJncyAvKjogQXJyYXk8T2JqZWN0PiovKSB7XG4gIHZhciBsaW5lcyA9IGNoaWxkLnZhbHVlLnNwbGl0KC9cXHJcXG58XFxufFxcci8pO1xuXG4gIHZhciBsYXN0Tm9uRW1wdHlMaW5lID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxpbmVzW2ldLm1hdGNoKC9bXiBcXHRdLykpIHtcbiAgICAgIGxhc3ROb25FbXB0eUxpbmUgPSBpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdHIgPSBcIlwiO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbGluZSA9IGxpbmVzW2ldO1xuXG4gICAgdmFyIGlzRmlyc3RMaW5lID0gaSA9PT0gMDtcbiAgICB2YXIgaXNMYXN0TGluZSA9IGkgPT09IGxpbmVzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGlzTGFzdE5vbkVtcHR5TGluZSA9IGkgPT09IGxhc3ROb25FbXB0eUxpbmU7XG5cbiAgICAvLyByZXBsYWNlIHJlbmRlcmVkIHdoaXRlc3BhY2UgdGFicyB3aXRoIHNwYWNlc1xuICAgIHZhciB0cmltbWVkTGluZSA9IGxpbmUucmVwbGFjZSgvXFx0L2csIFwiIFwiKTtcblxuICAgIC8vIHRyaW0gd2hpdGVzcGFjZSB0b3VjaGluZyBhIG5ld2xpbmVcbiAgICBpZiAoIWlzRmlyc3RMaW5lKSB7XG4gICAgICB0cmltbWVkTGluZSA9IHRyaW1tZWRMaW5lLnJlcGxhY2UoL15bIF0rLywgXCJcIik7XG4gICAgfVxuXG4gICAgLy8gdHJpbSB3aGl0ZXNwYWNlIHRvdWNoaW5nIGFuIGVuZGxpbmVcbiAgICBpZiAoIWlzTGFzdExpbmUpIHtcbiAgICAgIHRyaW1tZWRMaW5lID0gdHJpbW1lZExpbmUucmVwbGFjZSgvWyBdKyQvLCBcIlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHJpbW1lZExpbmUpIHtcbiAgICAgIGlmICghaXNMYXN0Tm9uRW1wdHlMaW5lKSB7XG4gICAgICAgIHRyaW1tZWRMaW5lICs9IFwiIFwiO1xuICAgICAgfVxuXG4gICAgICBzdHIgKz0gdHJpbW1lZExpbmU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0cikgYXJncy5wdXNoKHQuc3RyaW5nTGl0ZXJhbChzdHIpKTtcbn1cblxuZnVuY3Rpb24gYnVpbGRDaGlsZHJlbihub2RlIC8qOiBPYmplY3QqLykgLyo6IEFycmF5PE9iamVjdD4qLyB7XG4gIHZhciBlbGVtcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG5cbiAgICBpZiAodC5pc0pTWFRleHQoY2hpbGQpKSB7XG4gICAgICBjbGVhbkpTWEVsZW1lbnRMaXRlcmFsQ2hpbGQoY2hpbGQsIGVsZW1zKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0LmlzSlNYRXhwcmVzc2lvbkNvbnRhaW5lcihjaGlsZCkpIGNoaWxkID0gY2hpbGQuZXhwcmVzc2lvbjtcbiAgICBpZiAodC5pc0pTWEVtcHR5RXhwcmVzc2lvbihjaGlsZCkpIGNvbnRpbnVlO1xuXG4gICAgZWxlbXMucHVzaChjaGlsZCk7XG4gIH1cblxuICByZXR1cm4gZWxlbXM7XG59Il19
//# sourceURL=/Users/naver/.atom/packages/build-gulp/spec/fixture/node_modules_babel/babel-types/lib/react.js
