{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":2560,"height":1372,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/naver/nhn_work/git/Coding-Convention"],"buffers":[{"text":"","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4,"goalScreenRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","modifiedWhenLastPersisted":false,"deserializer":"TextBuffer"},{"text":"= 네이버 코딩 컨벤션 (JavaScript)\n:revnumber: v0.1\n\n== 들여쓰기 (Indentation)\n\n=== 메소드 체인이 길어지는 경우 적절히 사용한다.\n[source.js]\n.나쁜 예\n----\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\nvar leds = stage.selectAll('.led').data(data).enter().append('svg:svg').class('led', true)\n    .attr('width',  (radius + margin) * 2).append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n----\n\n[source.js]\n.좋은 예\n----\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n\n\nvar leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .class('led', true)\n    .attr('width',  (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n----\n\n== 중괄호 (Brace)\n중괄호는 클래스, 메서드, 제어문의 블럭을 구분한다.\n\n=== 줄의 끝에서 중괄호 시작\n중괄호는  클래스 선언, 메서드 선언, 조건/반복문/제어문,줄의 마지막에서 시작한다.\n\n\n[source.js]\n.나쁜 예\n----\nvar Empty = function()\n{\n}\n----\n\n[source.js]\n.좋은 예\n----\nvar Empty = function(){\n\n}\n\nswitch(p){\n\tcase 0 :\n\t\tfield.set(0);\n\t\tbreak;\n\tcase 1 : {\n\t\tbreak;\n\t}\n\tdefault :\n\t\tfield.reset();\n}\n\nif(true){\n\treturn;\n}else if(false){\n\treturn;\n}else{\n}\n\n----\n\n=== 조건/반복문/제어문에 중괄호 사용\n\n조건/반복문/제어문이 한줄로 끝이라도 중괄호를 활용한다.\n\n[source.js]\n.나쁜 예\n----\nif (exp == null) return false;\n\nfor (var i in obj) if ( i === \"stop\" ) return obj[i];\n----\n\n[source.js]\n.좋은 예\n----\nif (exp == null) {\n\treturn false;\n}\n\nfor (var i in obj) {\n\tif ( i === \"stop\" ) {\n\t\treturn obj[i];\n\t}\n}\n----\n\n== 줄바꿈 (Line Wrapping)\n줄 바꿈은 작성한 명령어가 줄 너비를 초과했을 경우 코드 가독성을 위해서 강제로 줄을 바꾸는 것을 말한다. 명령문을 길게 작성하면 소스 코드 분석이 어려워 진다.\n\n=== 최대 줄 너비는 120\n고해상도 모니터(해상도 1280*1024)사용이 보편화 됨에 따라, 최대 줄 사용 너비는 120자까지 가능하다.\n\n=== 한 줄 초과 시 줄 바꿈 준수\n- 변수, 파라미터 등의 경우에는 콤마(,) 다음에 줄 바꿈을 한다.\n- 연산식의 경우에는 연산자 후에 줄 바꿈을 한다.\n- 시작 소괄호( ( )의 경우에는 시작 소괄호( ( ) 전에 줄 바꿈을 한다.\n- 줄 바꿈 후에는 가독성을 위하여 자동 들여쓰기를 한다.\n- 상위 레벨의 깊이에 맞게 들여쓰기를 한다\n\n[source.js]\n----\nother.bar(100, 200, 300, 400,\n\t500, 600, 700, 800, 900);\n\nvar sum = 100 + 200 + 300 + 400 +\n\t500 + 600 + 700 + 800;\n\n----\n\n=== 긴 문자의 경우 줄바꿈시 escape 문자 금지(\\)\nescape문자 대신 +연산사를 사용한다.\n\n[source.js]\n.나쁜 예\n----\nvar text = \"Hello\\\nWorld\";\n----\n\n[source.js]\n.좋은 예\n----\nvar text = \"Hello\" +\n\t\"World\";\n----\n\n== 주석(Comments)\n\n=== 복수행 주석\n/** ... */을 사용하고 함수의 설명과 모든 매개 변수와 반환 값에 대한 형식과 값을 설명합니다.\n\n[source.js]\n.나쁜 예\n----\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param <String> tag\n// @return <Element> element\nfunction make(tag) {\n\t// ...stuff...\n\n\treturn element;\n}\n----\n[source.js]\n.좋은 예\n----\n/**\n * make() returns a new element\n * based on the passed in tag name\n *\n * @param <String> tag\n * @return <Element> element\n */\nfunction make(tag) {\n\t// ...stuff...\n\n\treturn element;\n}\n----\n\n=== 한줄 주석\n복수행을 제외한 상황에서는 \"//\" 한줄 주석을 사용한다.\n\n[source.js]\n.좋은 예\n----\n// We need an explicit \"bar\", because later in the code foo is checked.\nvar foo = \"bar\";\n \n// Even long comments that span\n// multiple lines use the single\n// line comment form.\n----\n\n== 빈 줄(Blank Lines)\n빈 줄은 명령문 그룹의 영역을 표시하기 위하여 사용한다. 특정 로직을 처리하는 수 많은 명령문이 구분 없이 혼재하여 있거나 제어문과 명령문 사이의 영역을 구분하지 않으면 소스 코드 분석이 어려워진다.\n\n=== 함수 선언 후 빈 줄 사용 지양\n함수를 선언한 경우에는 다음에 빈 줄을 삽입하지 않는다. \n\n[source.js]\n----\nfunction _getXHR(){\n\tif(window.XMLHttpRequest){ /* (빈 줄 위치) 메소드 선언 후 다음 줄에 빈 줄을 삽입하지 않는다. */\n\t\treturn new XMLHttpRequest();\n\t}else if (ActiveXObject){\n\t\t...\n\t} \n}\n----\n\n=== 함수 선언 간 빈 줄 사용 준수\n=== 변수 선언 후 빈 줄 사용 준수\n[source.js]\n.나쁜 예\n----\nvar i, len, dragonball,\n    items = getItems(),\n    goSportsTeam = true;\n\nvar i, items = getItems(),\n    dragonball,\n    goSportsTeam = true,\n    len;\n----\n\n[source.js]\n.좋은 예\n----\nvar items = getItems(),\n    goSportsTeam = true,\n    dragonball,\n    length,\n    i;\n----\n\n=== 명령문, 제어문간 빈 줄 사용 준수 \n\n[source.js]\n.좋은 예\n----\nreq.open(opt.method.toUpperCase(), this._url, true);\nreq.setRequestHeader(\"charset\", \"utf-8\");\n/* (빈 줄 위치) 명령문과 제어문 사이에는 빈 줄을 삽입한다. */\nfor(var x in this._headers){\n\tif(typeof this._headers[x] == \"function\"){\n\t\tcontinue;\n\t}\n\t/* (빈 줄 위치) 명령문과 제어문 사이에는 빈 줄을 삽입한다. */\n\treq.setRequestHeader(x, this._headers[x]);\n}\n/* (빈 줄 위치) 명령문과 제어문 사이에는 빈 줄을 삽입한다. */\nif(typeof req.onload != \"undefined\"){\n\treq.onload = function(rq){\n\t\tclearTimeout(_timer);\n\t\tt._onload(rq)\n\t};\n}else{\n\treq.onreadystatechange = function(rq){\n\t\tclearTimeout(_timer);\n\t\tt._onload(rq)\n\t}; \n}\n----\n\n== 새 줄(New Lines)\n\n=== else if, else 문 새 줄 사용 지양 \n=== catch, finally 문 새 줄 사용 지양 \n=== do 문 새 줄 사용 지양 \n[source.js]\n.나쁜 예\n----\nif(true){\n\treturn;\n}\nelse if(false){\n\treturn;\n}\nelse{\n\treturn;\n} \n----\n\n[source.js]\n.좋은 예\n----\nif(true){\n\treturn;\n}else if(false){\n\treturn;\n}else{\n\treturn;\n} \n----\n\n=== 한 줄 명령문 새 줄 사용 준수 \n=== 빈 블록, 빈 몸체 새 줄 사용 준수 \n[source.js]\n.나쁜 예\n----\nfunction Empty{}\n----\n\n[source.js]\n.좋은 예\n----\nfunction Empty{\n}\nfunction Example{\n\tvar oListener = new Listener(){\n\t};\n\tfoo = function(){\n\t\tdo{\n\t\t}while(false);\n\t\tfor(;;){\n\t\t}\n\t}\n} \n----\n\n=== 파라미터, 닫는 괄호간 새 줄 사용 지양 \n[source.js]\n.좋은 예\n----\nvar aNewArray = aArray.filter(function(v, i, o){\n\treturn v > 50;\n}); \n----\n\n== 공백 (White spaces)\n\n=== 탭에는 공백 2개를 설정하십시오.\n[source.js]\n.나쁜 예\n----\nfunction() {\n∙∙∙∙var name;\n}\n\nfunction() {\n∙var name;\n}\n----\n[source.js]\n.좋은 예\n----\nfunction() {\n∙∙var name;\n}\n----\n\n=== 중괄호({})의 앞에 공백을 하나 넣는다.\n=== 단항 연산자(!, ++..)는 연산수 앞에 공백을 두지 않는다.\n=== 대괄호, 종료 구분자 공백 사용 지양.\n=== 콤마(,), 세미콜론(;)은 뒤에 공백을 삽입한다. \n=== 콜론(:)을 사용하는 경우에는 반드시 앞과 뒤에 공백을 삽입한다. \n=== 빈 생성자의 경우 공백을 삽입하지 않는다. ({}, [], fn())\n\n== 이름(Names)\n\n=== 공통 규칙\n\n==== 영문 사용\n소스의 변수명, 클래스명 등에는 영문 이외의 언어를 사용하지 않는다.\n\n==== 한글 발음 사용 금지\n한글 발음을 그대로 사용하지 않는다.\n\n''무형자산''이라는 의미의 변수를 예로 들면 아래와 같다.\n\n- 나쁜 예 : `moohyungJasan`\n- 좋은 예 : `intangibleAssets`\n\n==== 특수 문자 사용 금지\n클래스, 메소드 등의 이름에는 특수 문자를 사용하지 않는다.\n[source.js]\n.나쁜 예\n----\nfuntion $some(){\n\t\n}\n----\n\n\n==== Object, 함수, 그리고 인스턴스로는 camelCase를 사용하십시오.\n[source.js]\n.나쁜 예\n----\nvar ajax_history = new AjaxHistory(...);\n----\n\n[source.js]\n.좋은 예\n----\nvar ajaxHistory = new AjaxHistory(...);\n----\n\n\n=== 네임스페이스 명명 규칙 \n==== 소문자 사용 준수 \n[source.js]\n.나쁜 예\n----\nnaver.FOO.bar = function(){\n\t\n}\n----\n\n[source.js]\n.좋은 예\n----\nnaver.foo.bar = function(){\n\t\n}\n----\n\n=== 클래스명\n==== 명사 사용 준수 \n==== Class와 생성자에는 PascalCase를 사용하십시오.\n[source.js]\n.나쁜 예\n----\nvar foo = eg.Class(...);\n----\n\n[source.js]\n.좋은 예\n----\nvar Foo = eg.Class(...);\n----\n\n=== 메서드명(Methods)\n==== 동사 사용 준수 \n==== 외부에서 접근할 가능성이 있는 private 메서드는 밑줄 _을 사용한다.\n.나쁜 예\n----\neg.Class({\n\t\"privateMethod\" : function(){\n\n\t}\n});\n----\n\n[source.js]\n.좋은 예\n----\neg.Class({\n\t\"_privateMethod\" : function(){\n\n\t}\n});\n----\n==== 외부에서 접근할 수 없는 경우는 일반적인 메서드 명으로 만든다.\n[source.js]\n.나쁜 예\n----\n(function(){\n\tfunction _privateMethod(){\n\n\t}\n\n\tfunction publicMethod()){\n\t\t_privateMethod();\n\t}\n})();\n----\n\n[source.js]\n.좋은 예\n----\n(function(){\n\tfunction privateMethod(){\n\n\t}\n\n\tfunction publicMethod(){\n\t\tprivateMethod();\n\t}\n})();\n----\n\n\n=== 변수명\n==== 명사 사용 준수 \n==== this의 참조를 저장할 때 _this 를 사용하십시오.\n[source.js]\n.나쁜 예\n----\nvar foo = {\n\t\"some\" : function(){\n\t\tvar that = this;\n\t\tsetTimeout(function(){\n\t\t\tthat.thing();\n\t\t},1000);\n\t},\n\t\"thing\" : function(){\n\t}\n}\n----\n\n[source.js]\n.좋은 예\n----\nvar foo = {\n\t\"some\" : function(){\n\t\tvar _this = this;\n\t\tsetTimeout(function(){\n\t\t\t_this.thing();\n\t\t},1000);\n\t},\n\t\"thing\" : function(){\n\t}\n}\n----\n==== jQuery레퍼런스의 경우 $로 시작합니다.\n[source.js]\n.나쁜 예\n----\nvar foo = {\n\t\"some\" : function(){\n\t\tvar base = jQuery(\"#base\");\n\t}\n}\n----\n\n[source.js]\n.좋은 예\n----\nvar foo = {\n\t\"some\" : function(){\n\t\tvar $base = jQuery(\"#base\");\n\t}\n}\n----\n\n\n=== 속성명\n==== 외부에서 접근할 가능성이 있는 private 속성은 밑줄 _ 을 사용한다.\n.나쁜 예\n----\neg.Class({\n\t\"privateState\" : true\n});\n----\n\n[source.js]\n.좋은 예\n----\neg.Class({\n\t\"_privateState\" : true\n});\n----\n==== 외부에서 접근할 수 없는 경우는 일반적인 속성 명으로 만든다.\n[source.js]\n.나쁜 예\n----\n(function(){\n\tvar _privateState = true;\n\n\tfunction publicMethod()){\n\t\t_privateState;\n\t}\n})();\n----\n\n[source.js]\n.좋은 예\n----\n(function(){\n\tvar privateState = true;\n\n\tfunction publicMethod()){\n\t\tprivateState;\n\t}\n})();\n----\n\n=== 상수 이름\n==== 대문자 사용 준수 \n[source.js]\n.나쁜 예\n----\nvar ie = 1;\n----\n\n[source.js]\n.좋은 예\n----\nvar IE = 1;\n----","markers":{"markers":{"1":{"id":1,"range":[[10,0],[10,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/naver/nhn_work/git/Coding-Convention/js/src/js.adoc","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"dc418f7fe747f9434f7c036d88bf025454c3502a","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/naver/nhn_work/git/Coding-Convention/js/src/js.adoc","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/naver/nhn_work/git/Coding-Convention/js/src/js.adoc","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/naver/nhn_work/git/Coding-Convention/js/src/js.adoc":1431502810822},"metrics":{"sessionLength":154252},"tree-view":{"directoryExpansionStates":{"/Users/naver/nhn_work/git/Coding-Convention":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"cpp":{"isExpanded":false,"entries":{}},"gradle":{"isExpanded":false,"entries":{}},"java":{"isExpanded":false,"entries":{}},"js":{"isExpanded":true,"entries":{"src":{"isExpanded":true,"entries":{}}}},"style":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/naver/nhn_work/git/Coding-Convention/js/src/js.adoc","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}